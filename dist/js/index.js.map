{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/axios/lib/utils.js","webpack:///./node_modules/matter-js/build/matter.js","webpack:///./node_modules/axios/lib/defaults.js","webpack:///./node_modules/axios/lib/helpers/bind.js","webpack:///./node_modules/axios/lib/adapters/xhr.js","webpack:///./node_modules/axios/lib/core/createError.js","webpack:///./node_modules/axios/lib/cancel/isCancel.js","webpack:///./node_modules/axios/lib/cancel/Cancel.js","webpack:///./node_modules/poly-decomp/src/index.js","webpack:///./node_modules/axios/index.js","webpack:///./node_modules/axios/lib/axios.js","webpack:///./node_modules/is-buffer/index.js","webpack:///./node_modules/axios/lib/core/Axios.js","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/axios/lib/helpers/normalizeHeaderName.js","webpack:///./node_modules/axios/lib/core/settle.js","webpack:///./node_modules/axios/lib/core/enhanceError.js","webpack:///./node_modules/axios/lib/helpers/buildURL.js","webpack:///./node_modules/axios/lib/helpers/parseHeaders.js","webpack:///./node_modules/axios/lib/helpers/isURLSameOrigin.js","webpack:///./node_modules/axios/lib/helpers/btoa.js","webpack:///./node_modules/axios/lib/helpers/cookies.js","webpack:///./node_modules/axios/lib/core/InterceptorManager.js","webpack:///./node_modules/axios/lib/core/dispatchRequest.js","webpack:///./node_modules/axios/lib/core/transformData.js","webpack:///./node_modules/axios/lib/helpers/isAbsoluteURL.js","webpack:///./node_modules/axios/lib/helpers/combineURLs.js","webpack:///./node_modules/axios/lib/cancel/CancelToken.js","webpack:///./node_modules/axios/lib/helpers/spread.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/js/helper.js","webpack:///./src/js/gl_renderer.js","webpack:///./src/js/renderer.js","webpack:///./src/js/game_param.js","webpack:///./src/js/physics.js","webpack:///./src/js/index.js","webpack:///./src/js/engine.js","webpack:///./src/js/game.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","isBuffer","toString","isArray","val","isObject","isFunction","forEach","obj","fn","length","isArrayBuffer","isFormData","FormData","isArrayBufferView","ArrayBuffer","isView","buffer","isString","isNumber","isUndefined","isDate","isFile","isBlob","isStream","pipe","isURLSearchParams","URLSearchParams","isStandardBrowserEnv","navigator","product","window","document","merge","result","assignValue","arguments","extend","a","b","thisArg","trim","str","replace","global","require","e","f","u","Error","code","1","_dereq_","Body","Vertices","Vector","Sleeping","Common","Bounds","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","options","defaults","id","nextId","type","label","parts","plugin","angle","vertices","fromPath","position","x","y","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","velocity","angularVelocity","isSensor","isStatic","isSleeping","motion","sleepThreshold","density","restitution","friction","frictionStatic","frictionAir","collisionFilter","category","mask","group","slop","timeScale","render","visible","opacity","sprite","xScale","yScale","xOffset","yOffset","lineWidth","body","_initProperties","nextGroup","isNonColliding","nextCategory","set","bounds","positionPrev","clone","anglePrev","parent","rotate","axes","update","area","mass","inertia","defaultFillStyle","choose","fillStyle","strokeStyle","min","max","settings","setStatic","setMass","setDensity","setInertia","setVertices","setPosition","setAngle","setVelocity","setAngularVelocity","setParts","part","_original","inverseMass","inverseInertia","Infinity","moment","fromVertices","centre","translate","autoHull","slice","push","concat","clockwiseSort","hull","hullCentre","total","_totalProperties","delta","sub","rotateAbout","magnitude","Math","abs","translation","add","rotation","point","cos","sin","dx","dy","scale","scaleX","scaleY","totalArea","totalInertia","circleRadius","deltaTime","correction","deltaTimeSquared","pow","velocityPrevX","velocityPrevY","applyForce","offset","properties","mult","div","../core/Common","../core/Sleeping","../geometry/Axes","../geometry/Bounds","../geometry/Vector","../geometry/Vertices","../render/Render","2","Composite","Events","isModified","bodies","constraints","composites","setModified","composite","updateParents","updateChildren","childComposite","objects","trigger","warn","addBody","addConstraint","addComposite","constraint","remove","deep","removeBody","removeConstraint","removeComposite","compositeA","compositeB","indexOf","removeCompositeAt","splice","removeBodyAt","removeConstraintAt","clear","keepStatic","filter","allBodies","allConstraints","allComposites","move","rebase","recursive","../core/Events","./Body","3","World","gravity","../constraint/Constraint","./Composite","4","Contact","vertex","normalImpulse","tangentImpulse","index","5","Detector","SAT","Pair","collisions","broadphasePairs","engine","pairsTable","pairs","table","bodyA","bodyB","canCollide","overlaps","j","partA","k","partB","previousCollision","pairId","pair","isActive","collision","collides","collided","filterA","filterB","./Pair","./SAT","6","Grid","controller","detector","buckets","pairsList","bucketWidth","bucketHeight","grid","forceUpdate","col","row","bucket","bucketId","world","gridChanged","newRegion","_getRegion","region","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","floor","column","pairKeys","keys","./Detector","7","timestamp","parentA","parentB","contacts","activeContacts","separation","timeCreated","timeUpdated","supports","support","contactId","contact","depth","setActive","./Contact","8","Pairs","_pairMaxIdleLife","list","collisionStart","collisionActive","collisionEnd","activePairIds","removeOld","pairIndex","indexesToRemove","9","Query","Bodies","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","rectangle","outside","contains","../factory/Bodies","10","Resolver","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","preSolvePosition","activeCount","solvePosition","normal","bodyBtoA","contactShare","tempA","_temp","tempB","tempC","tempD","penetration","dot","postSolvePosition","preSolveVelocity","tangent","contactVertex","impulse","cross","solveVelocity","timeScaleSquared","tempE","offsetA","offsetB","velocityPointA","perp","velocityPointB","relativeVelocity","normalVelocity","tangentVelocity","tangentSpeed","tangentVelocityDirection","sign","normalForce","clamp","maxFriction","oAcN","oBcN","share","contactNormalImpulse","contactTangentImpulse","11","overlapAB","overlapBA","minOverlap","canReusePrevCol","axisBodyA","axisBody","axisBodyB","axisNumber","_overlapAxes","reused","overlap","axis","verticesB","_findSupports","verticesA","neg","projectionA","projectionB","Number","MAX_VALUE","_projectToAxis","projection","distance","vertexA","vertexB","nearestDistance","vertexToBody","bodyAPosition","prevIndex","nextIndex","12","Constraint","_warming","_torqueDampen","_minLength","pointA","pointB","initialPointA","initialPointB","stiffness","damping","angularStiffness","angleA","angleB","anchors","preSolveAll","solveAll","fixedA","fixedB","solve","pointAWorld","pointBWorld","currentLength","difference","massTotal","inertiaTotal","resistanceTotal","zero","postSolveAll","13","MouseConstraint","Mouse","mouse","canvas","element","mouseConstraint","on","_triggerEvents","button","mouseEvents","sourceEvents","mousemove","mousedown","mouseup","clearSourceEvents","../body/Composite","../collision/Detector","../core/Mouse","./Constraint","14","_nextId","_seed","_nowStartTime","Date","argsStart","deepClone","source","prop","constructor","values","path","begin","end","split","shuffle","array","random","temp","choices","isElement","HTMLElement","nodeType","nodeName","isPlainObject","now","performance","webkitNow","_seededRandom","colorToNumber","colorString","charAt","parseInt","logLevel","log","console","apply","Array","info","haystack","needle","map","func","mapped","topologicalSort","graph","visited","node","_topologicalSort","neighbors","neighbor","chain","funcs","_chained","lastResult","args","chainPathBefore","base","chainPathAfter","_requireGlobal","globalName","moduleName","this","self","15","Engine","Render","positionIterations","velocityIterations","constraintIterations","enableSleeping","events","timing","broadphase","renderDefaults","metrics","extended","event","_bodiesApplyGravity","_bodiesUpdate","afterCollisions","_bodiesClearForces","engineA","engineB","gravityScale","worldBounds","../body/Body","../body/World","../collision/Grid","../collision/Pairs","../collision/Resolver","./Common","./Events","./Metrics","./Sleeping","16","eventNames","callback","names","off","join","callbacks","newCallbacks","eventClone","17","Matter","Plugin","version","uses","used","use","before","after","./Plugin","18","19","absolute","mousedownPosition","mouseupPosition","wheelDelta","pixelRatio","getAttribute","mousewheel","_getRelativeMousePosition","touches","changedTouches","preventDefault","detail","setElement","addEventListener","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","undefined","pageXOffset","scrollLeft","scrollY","pageYOffset","scrollTop","pageX","left","pageY","top","clientWidth","width","clientHeight","height","20","_registry","register","isPlugin","registered","pluginVersion","versionParse","number","registeredVersion","resolve","dependency","dependencyParse","range","install","isUsed","isFor","parsed","for","versionSatisfies","plugins","dependencies","sortedDependencies","status","_warned","tracked","parsedBase","resolved","test","identifiers","isRange","isNaN","substr","operator","prerelease","rangeParsed","rangeParts","versionParsed","versionParts","21","Runner","_requestAnimationFrame","_cancelAnimationFrame","_frameTimeout","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","setTimeout","clearTimeout","runner","fps","deltaSampleSize","counterTimestamp","frameCounter","deltaHistory","timePrev","timeScalePrev","frameRequestId","isFixed","enabled","deltaMin","deltaMax","run","time","tick","stop","start","./Engine","22","_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepCounter","sleepingBody","movingBody","wasSleeping","23","decomp","chamfer","radius","quality","qualityMin","qualityMax","trapezoid","slope","verticesPath","roof","x1","x2","x3","circle","maxSides","sides","ceil","polygon","theta","PI","xx","yy","toFixed","vertexSets","flagInternal","removeCollinear","minimumArea","isConvex","v","z","concave","makeCCW","removeCollinearPoints","decomposed","quickDecomp","chunk","chunkVertices","pav","pbv","da","magnitudeSquared","db","isInternal","24","Composites","stack","columns","rows","columnGap","rowGap","lastBody","maxHeight","bodyHeight","bodyWidth","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","bodyBWidth","mesh","crossBrace","bodyC","pyramid","actualRows","lastBodyWidth","newtonsCradle","size","car","wheelSize","wheelAOffset","wheelBOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","./Bodies","25","normalise","gradient","26","boundsA","boundsB","vector","shift","deltaX","deltaY","27","Svg","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","segmentIndex","lx","ly","points","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag","28","sqrt","output","vectorA","vectorB","cross3","vectorC","scalar","negate","atan2","29","match","parseFloat","mean","average","signed","numerator","denominator","vertice","nextVertice","newVertices","prevVertex","nextVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","radiusVector","midNormal","scaledVertex","precision","alpha","acos","sort","flag","upper","lower","pop","30","RenderPixi","../collision/Contact","../collision/Pair","../collision/Query","../collision/SAT","../constraint/MouseConstraint","../core/Engine","../core/Matter","../core/Metrics","../core/Plugin","../core/Runner","../factory/Composites","../geometry/Svg","../render/RenderPixi","31","background","wireframeBackground","hasBounds","wireframes","showSleeping","showDebug","showBroadphase","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showShadows","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","context","getContext","textures","setPixelRatio","appendChild","loop","_getPixelRatio","setAttribute","style","lookAt","padding","center","viewHeight","viewWidth","outerRatio","innerRatio","startViewTransform","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","endViewTransform","setTransform","currentBackground","_applyBackground","globalCompositeOperation","fillRect","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyVelocity","bodyIds","separations","vertexNumbers","mousePosition","debug","debugTimestamp","text","round","debugString","font","fillText","beginPath","arc","closePath","moveTo","coils","lineTo","stroke","fill","bodyShadows","distanceX","distanceY","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","globalAlpha","texture","_getTexture","drawImage","rect","normalPosX","normalPosY","bucketKeys","inspector","selected","item","data","setLineDash","selectStart","selectBounds","createElement","oncontextmenu","onselectstart","devicePixelRatio","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","imagePath","image","Image","src","cssBackground","backgroundSize","32","renderer","container","spriteContainer","pixiOptions","transparent","view","antialias","backgroundColor","PIXI","WebGLRenderer","Container","sprites","primitives","addChild","children","removeChild","bgSprite","addChildAt","setBackground","isColor","color","Sprite","constraintRender","primitiveId","primitive","Graphics","beginFill","lineStyle","endFill","bodyRender","spriteId","_createBodySprite","_createBodyPrimitive","initialAngle","texturePath","anchor","strokeStyleIndicator","strokeStyleWireframe","strokeStyleWireframeIndicator","Texture","fromImage","process","utils","normalizeHeaderName","DEFAULT_CONTENT_TYPE","Content-Type","setContentTypeIfUnset","headers","adapter","XMLHttpRequest","getDefaultAdapter","transformRequest","JSON","stringify","transformResponse","parse","timeout","xsrfCookieName","xsrfHeaderName","maxContentLength","validateStatus","common","Accept","method","settle","buildURL","parseHeaders","isURLSameOrigin","createError","btoa","config","Promise","reject","requestData","requestHeaders","request","loadEvent","xDomain","XDomainRequest","url","onprogress","ontimeout","auth","username","password","Authorization","open","params","paramsSerializer","readyState","responseURL","responseHeaders","getAllResponseHeaders","response","responseType","responseText","statusText","onerror","cookies","xsrfValue","withCredentials","read","toLowerCase","setRequestHeader","onDownloadProgress","onUploadProgress","upload","cancelToken","promise","then","cancel","abort","send","enhanceError","message","error","__CANCEL__","Cancel","lineInt","l1","l2","a1","b1","c1","a2","b2","c2","det","scalar_eq","lineSegmentsIntersect","p1","p2","q1","q2","triangleArea","isLeft","isLeftOn","isRight","isRightOn","edges","polygonGetCutEdges","tmp1","tmp2","tmpPoly","nDiags","polygonIsReflex","polygonCanSee","polygonCopy","polygonAt","polygonSlice","cutEdges","polys","cutEdge","poly","polygonQuickDecomp","reflexVertices","steinerPoints","maxlevel","level","upperInt","lowerInt","upperDist","lowerDist","closestDist","upperIndex","lowerIndex","closestIndex","lowerPoly","upperPoly","getIntersectionPoint","sqdist","polygonAppend","polygonCanSee2","isSimple","num","collinear","removeDuplicatePoints","pi","points_eq","br","tmp","N","polygonReverse","tmpPoint1","tmpPoint2","thresholdAngle","ab","bc","magA","magB","from","to","tmpLine1","tmpLine2","dist","targetPoly","polygonClear","Axios","createInstance","defaultConfig","instance","axios","instanceConfig","CancelToken","isCancel","all","promises","spread","default","readFloatLE","isSlowBuffer","_isBuffer","InterceptorManager","dispatchRequest","interceptors","interceptor","unshift","fulfilled","rejected","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","noop","nextTick","title","browser","env","argv","versions","addListener","once","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","normalizedName","encode","encodeURIComponent","serializedParams","toISOString","ignoreDuplicateOf","line","originURL","msie","userAgent","urlParsingNode","resolveURL","href","protocol","host","search","hash","hostname","port","pathname","location","requestURL","chars","E","input","block","charCode","String","idx","charCodeAt","write","expires","domain","secure","cookie","toGMTString","RegExp","decodeURIComponent","handlers","eject","h","transformData","isAbsoluteURL","combineURLs","throwIfCancellationRequested","throwIfRequested","baseURL","reason","fns","relativeURL","executor","TypeError","resolvePromise","token","arr","g","Function","eval","resize","el","innerWidth","innerHeight","getResponseDist","MAPSIZE","LEVELGROUP","LOW","MID","HIGH","GLRenderer","vshader","fshader","sceneVShader","sceneFShader","gl","getWebGLContext","preserveDrawingBuffer","pointProgram","createProgram","attributeLocation","uniformLocation","sceneProgram","blendFunc","SRC_ALPHA","ONE","enable","BLEND","clearColor","fbo","initFramebufferObject","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","Float32Array","setUniform2v","program","getUniformLocation","dataArray","useProgram","uniform2fv","setUniform1i","uniform1i","typeName","getAttribLocation","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","vertexAttribPointer","enableVertexAttribArray","drawPoint","count","bindFramebuffer","FRAMEBUFFER","viewport","pointData","positionData","levelData","sizeData","COLOR_BUFFER_BIT","drawArrays","POINTS","drawScene","TRIANGLES","framebuffer","depthBuffer","OFFSCREEN_WIDTH","OFFSCREEN_HEIGHT","deleteFramebuffer","deleteTexture","deleteRenderbuffer","createFramebuffer","createTexture","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MIN_FILTER","LINEAR","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","setPointData","vShader","fShader","Renderer","_this","isInit","initPromise","glRenderer","updateData","posData","posDataArray","levelDataArray","sizeDataArray","draw","BallRadiusMap","MyBall","defaultCategory","mergeCategory","Physics","stats","target","sceneSize","wallWidth","getElementById","collisionInfo","checkCollision","mergeBall","srcBody","targetBody","getDistSq","posA","posB","newLevel","velovity","getAllBall","isFoundCollision","isMerging","createBall","ball","stillBall","shoot","pos","startV","ballList","updateRender","debugWrapper","physics","updateRendererData","addStillBall","posList","levelList","sizeList","coord","px2coord","randomLevel","Stats","showPanel","dom","myGame","birthPos","newBallLevel","getResizeEl","animate"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 30);\n","'use strict';\n\nvar bind = require('./helpers/bind');\nvar isBuffer = require('is-buffer');\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = merge(result[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim\n};\n","/**\n* matter-js 0.14.2 by @liabru 2018-06-11\n* http://brm.io/matter-js/\n* License MIT\n*/\n\n/**\n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Matter = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(_dereq_,module,exports){\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Render = _dereq_('../render/Render');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                },\n                lineWidth: 0\n            }\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56'])),\n            defaultStrokeStyle = '#000';\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            value = settings[property];\n\n            if (!settings.hasOwnProperty(property))\n                continue;\n\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                delete part._original;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n     /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n     /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31}],2:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n* A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n* It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n* Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = _dereq_('../core/Events');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Body = _dereq_('./Body');\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {}\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for(var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {} object\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n                        .concat(Composite.allConstraints(composite))\n                        .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n     * If you need to change it manually, you should use the `Composite.setModified` method.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"./Body\":1}],3:[function(_dereq_,module,exports){\n/**\n* The `Matter.World` module contains methods for creating and manipulating the world composite.\n* A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n* A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n* It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n* There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class World\n* @extends Composite\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = _dereq_('./Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @constructor\n     * @param {} options\n     * @return {world} A new world\n     */\n    World.create = function(options) {\n        var composite = Composite.create();\n\n        var defaults = {\n            label: 'World',\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            bounds: { \n                min: { x: -Infinity, y: -Infinity }, \n                max: { x: Infinity, y: Infinity } \n            }\n        };\n        \n        return Common.extend(composite, defaults, options);\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The gravity to apply on the world.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n    /**\n     * A `Bounds` object that defines the world bounds for collision detection.\n     *\n     * @property bounds\n     * @type bounds\n     * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n     */\n\n    // World is a Composite body\n    // see src/module/Outro.js for these aliases:\n    \n    /**\n     * An alias for Composite.add\n     * @method add\n     * @param {world} world\n     * @param {} object\n     * @return {composite} The original world with the objects added\n     */\n\n    /**\n     * An alias for Composite.remove\n     * @method remove\n     * @param {world} world\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original world with the objects removed\n     */\n\n    /**\n     * An alias for Composite.clear\n     * @method clear\n     * @param {world} world\n     * @param {boolean} keepStatic\n     */\n\n    /**\n     * An alias for Composite.addComposite\n     * @method addComposite\n     * @param {world} world\n     * @param {composite} composite\n     * @return {world} The original world with the objects from composite added\n     */\n    \n     /**\n      * An alias for Composite.addBody\n      * @method addBody\n      * @param {world} world\n      * @param {body} body\n      * @return {world} The original world with the body added\n      */\n\n     /**\n      * An alias for Composite.addConstraint\n      * @method addConstraint\n      * @param {world} world\n      * @param {constraint} constraint\n      * @return {world} The original world with the constraint added\n      */\n\n})();\n\n},{\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Composite\":2}],4:[function(_dereq_,module,exports){\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n    \n    /**\n     * Generates a contact id.\n     * @method id\n     * @param {vertex} vertex\n     * @return {string} Unique contactID\n     */\n    Contact.id = function(vertex) {\n        return vertex.body.id + '_' + vertex.index;\n    };\n\n})();\n\n},{}],5:[function(_dereq_,module,exports){\n/**\n* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n*\n* @class Detector\n*/\n\n// TODO: speculative contacts\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar SAT = _dereq_('./SAT');\nvar Pair = _dereq_('./Pair');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Finds all collisions given a list of pairs.\n     * @method collisions\n     * @param {pair[]} broadphasePairs\n     * @param {engine} engine\n     * @return {array} collisions\n     */\n    Detector.collisions = function(broadphasePairs, engine) {\n        var collisions = [],\n            pairsTable = engine.pairs.table;\n\n        \n        for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0], \n                bodyB = broadphasePairs[i][1];\n\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping))\n                continue;\n            \n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\n                continue;\n\n\n            // mid phase\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n                for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                    var partA = bodyA.parts[j];\n\n                    for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                        var partB = bodyB.parts[k];\n\n                        if ((partA === bodyA && partB === bodyB) || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                            // find a previous collision we could reuse\n                            var pairId = Pair.id(partA, partB),\n                                pair = pairsTable[pairId],\n                                previousCollision;\n\n                            if (pair && pair.isActive) {\n                                previousCollision = pair.collision;\n                            } else {\n                                previousCollision = null;\n                            }\n\n                            // narrow phase\n                            var collision = SAT.collides(partA, partB, previousCollision);\n\n\n                            if (collision.collided) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n})();\n\n},{\"../geometry/Bounds\":26,\"./Pair\":7,\"./SAT\":11}],6:[function(_dereq_,module,exports){\n/**\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = _dereq_('./Pair');\nvar Detector = _dereq_('./Detector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            controller: Grid,\n            detector: Detector.collisions,\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // don't update out of world bodies\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    /**\n     * Clears the grid.\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        // add new pairs\n        for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                grid.pairs[pairId] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        // update pair counts\n        for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pairKeys,\n            pair,\n            pairs = [];\n\n        // grid.pairs is used as a hashmap\n        pairKeys = Common.keys(grid.pairs);\n\n        // iterate over grid.pairs\n        for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete grid.pairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n},{\"../core/Common\":14,\"./Detector\":5,\"./Pair\":7}],7:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = _dereq_('./Contact');\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n        \n        pair.collision = collision;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = Math.min(parentA.friction, parentB.friction);\n        pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n        pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n        pair.slop = Math.max(parentA.slop, parentB.slop);\n        activeContacts.length = 0;\n        \n        if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n                var support = supports[i],\n                    contactId = Contact.id(support),\n                    contact = contacts[contactId];\n\n                if (contact) {\n                    activeContacts.push(contact);\n                } else {\n                    activeContacts.push(contacts[contactId] = Contact.create(support));\n                }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n        } else {\n            if (pair.isActive === true)\n                Pair.setActive(pair, false, timestamp);\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n},{\"./Contact\":4}],8:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = _dereq_('./Pair');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n    \n    Pairs._pairMaxIdleLife = 1000;\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            activePairIds = [],\n            collision,\n            pairId,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\n                activePairIds.push(pairId);\n\n                pair = pairsTable[pairId];\n                \n                if (pair) {\n                    // pair already exists (but may or may not be active)\n                    if (pair.isActive) {\n                        // pair exists and is active\n                        collisionActive.push(pair);\n                    } else {\n                        // pair exists but was inactive, so a collision has just started again\n                        collisionStart.push(pair);\n                    }\n\n                    // update the pair\n                    Pair.update(pair, collision, timestamp);\n                } else {\n                    // pair did not exist, create a new pair\n                    pair = Pair.create(collision, timestamp);\n                    pairsTable[pairId] = pair;\n\n                    // push the new pair\n                    collisionStart.push(pair);\n                    pairsList.push(pair);\n                }\n            }\n        }\n\n        // deactivate previously active pairs that are now inactive\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            if (pair.isActive && Common.indexOf(activePairIds, pair.id) === -1) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n            }\n        }\n    };\n    \n    /**\n     * Finds and removes pairs that have been inactive for a set amount of time.\n     * @method removeOld\n     * @param {object} pairs\n     * @param {number} timestamp\n     */\n    Pairs.removeOld = function(pairs, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            indexesToRemove = [],\n            pair,\n            collision,\n            pairIndex,\n            i;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision;\n            \n            // never remove sleeping pairs\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n                pair.timeUpdated = timestamp;\n                continue;\n            }\n\n            // if pair is inactive for too long, mark it to be removed\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n                indexesToRemove.push(i);\n            }\n        }\n\n        // remove marked pairs\n        for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n},{\"../core/Common\":14,\"./Pair\":7}],9:[function(_dereq_,module,exports){\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar SAT = _dereq_('./SAT');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Bodies = _dereq_('../factory/Bodies');\nvar Vertices = _dereq_('../geometry/Vertices');\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {object[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n            \n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (Bounds.overlaps(part.bounds, body.bounds)) {\n                        var collision = SAT.collides(part, body);\n\n                        if (collision.collided) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {object[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n},{\"../factory/Bodies\":23,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"./SAT\":11}],10:[function(_dereq_,module,exports){\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount;\n\n        // find total contacts on each body\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            bodyBtoA,\n            contactShare,\n            positionImpulse,\n            contactCount = {},\n            tempA = Vector._temp[0],\n            tempB = Vector._temp[1],\n            tempC = Vector._temp[2],\n            tempD = Vector._temp[3];\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), \n                                    Vector.add(bodyA.positionImpulse, \n                                        Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n\n            pair.separation = Vector.dot(normal, bodyBtoA);\n        }\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    Vertices.translate(part.vertices, body.positionImpulse);\n                    Bounds.update(part.bounds, part.vertices, body.velocity);\n                    part.position.x += body.positionImpulse.x;\n                    part.position.y += body.positionImpulse.y;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += body.positionImpulse.x;\n                body.positionPrev.y += body.positionImpulse.y;\n\n                if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    body.positionImpulse.x = 0;\n                    body.positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    body.positionImpulse.x *= Resolver._positionWarming;\n                    body.positionImpulse.y *= Resolver._positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var i,\n            j,\n            pair,\n            contacts,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            tangent,\n            contact,\n            contactVertex,\n            normalImpulse,\n            tangentImpulse,\n            offset,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1];\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent;\n\n            // resolve each contact\n            for (j = 0; j < contacts.length; j++) {\n                contact = contacts[j];\n                contactVertex = contact.vertex;\n                normalImpulse = contact.normalImpulse;\n                tangentImpulse = contact.tangentImpulse;\n\n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                    impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                        bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                        bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                    }\n\n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                        bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                        bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1],\n            tempB = Vector._temp[2],\n            tempC = Vector._temp[3],\n            tempD = Vector._temp[4],\n            tempE = Vector._temp[5];\n        \n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length;\n\n            // update body velocities\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (var j = 0; j < contacts.length; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                    offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                    velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                    velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD), \n                    relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                    normalVelocity = Vector.dot(normal, relativeVelocity);\n\n                var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                    tangentSpeed = Math.abs(tangentVelocity),\n                    tangentVelocityDirection = Common.sign(tangentVelocity);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                    normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\n                // coulomb friction\n                var tangentImpulse = tangentVelocity,\n                    maxFriction = Infinity;\n\n                if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                    maxFriction = tangentSpeed;\n                    tangentImpulse = Common.clamp(\n                        pair.friction * tangentVelocityDirection * timeScaleSquared,\n                        -maxFriction, maxFriction\n                    );\n                }\n\n                // modify impulses accounting for mass, inertia and offset\n                var oAcN = Vector.cross(offsetA, normal),\n                    oBcN = Vector.cross(offsetB, normal),\n                    share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN  + bodyB.inverseInertia * oBcN * oBcN);\n\n                normalImpulse *= share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                    bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                    bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],11:[function(_dereq_,module,exports){\n/**\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n*/\n\n// TODO: true circles and curves\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {collision} previousCollision\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB, previousCollision) {\n        var overlapAB,\n            overlapBA, \n            minOverlap,\n            collision,\n            canReusePrevCol = false;\n\n        if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed\n                       + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\n            // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2;\n\n            // reuse collision object\n            collision = previousCollision;\n        } else {\n            collision = { collided: false, bodyA: bodyA, bodyB: bodyB };\n        }\n\n        if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n\n            minOverlap = SAT._overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n        } else {\n            // if we can't reuse a result, perform a full SAT test\n\n            overlapAB = SAT._overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            overlapBA = SAT._overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n                minOverlap = overlapAB;\n                collision.axisBody = bodyA;\n            } else {\n                minOverlap = overlapBA;\n                collision.axisBody = bodyB;\n            }\n\n            // important for reuse later\n            collision.axisNumber = minOverlap.axisNumber;\n        }\n\n        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n        collision.collided = true;\n        collision.depth = minOverlap.overlap;\n        collision.parentA = collision.bodyA.parent;\n        collision.parentB = collision.bodyB.parent;\n        \n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        // ensure normal is facing away from bodyA\n        if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n                x: minOverlap.axis.x,\n                y: minOverlap.axis.y\n            };\n        } else {\n            collision.normal = {\n                x: -minOverlap.axis.x,\n                y: -minOverlap.axis.y\n            };\n        }\n\n        collision.tangent = Vector.perp(collision.normal);\n\n        collision.penetration = collision.penetration || {};\n        collision.penetration.x = collision.normal.x * collision.depth;\n        collision.penetration.y = collision.normal.y * collision.depth; \n\n        // find support points, there is always either exactly one or two\n        var verticesB = SAT._findSupports(bodyA, bodyB, collision.normal),\n            supports = [];\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, verticesB[0]))\n            supports.push(verticesB[0]);\n\n        if (Vertices.contains(bodyA.vertices, verticesB[1]))\n            supports.push(verticesB[1]);\n\n        // find the supports from bodyA that are inside bodyB\n        if (supports.length < 2) {\n            var verticesA = SAT._findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n                \n            if (Vertices.contains(bodyB.vertices, verticesA[0]))\n                supports.push(verticesA[0]);\n\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1]))\n                supports.push(verticesA[1]);\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supports.length < 1)\n            supports = [verticesB[0]];\n        \n        collision.supports = supports;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {} verticesA\n     * @param {} verticesB\n     * @param {} axes\n     * @return result\n     */\n    SAT._overlapAxes = function(verticesA, verticesB, axes) {\n        var projectionA = Vector._temp[0], \n            projectionB = Vector._temp[1],\n            result = { overlap: Number.MAX_VALUE },\n            overlap,\n            axis;\n\n        for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            SAT._projectToAxis(projectionA, verticesA, axis);\n            SAT._projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n                result.overlap = overlap;\n                return result;\n            }\n\n            if (overlap < result.overlap) {\n                result.overlap = overlap;\n                result.axis = axis;\n                result.axisNumber = i;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    SAT._projectToAxis = function(projection, vertices, axis) {\n        var min = Vector.dot(vertices[0], axis),\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n    \n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {} bodyA\n     * @param {} bodyB\n     * @param {} normal\n     * @return [vector]\n     */\n    SAT._findSupports = function(bodyA, bodyB, normal) {\n        var nearestDistance = Number.MAX_VALUE,\n            vertexToBody = Vector._temp[0],\n            vertices = bodyB.vertices,\n            bodyAPosition = bodyA.position,\n            distance,\n            vertex,\n            vertexA,\n            vertexB;\n\n        // find closest vertex on bodyB\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertex;\n            }\n        }\n\n        // find next closest vertex using the two connected to it\n        var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n        vertex = vertices[prevIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        nearestDistance = -Vector.dot(normal, vertexToBody);\n        vertexB = vertex;\n\n        var nextIndex = (vertexA.index + 1) % vertices.length;\n        vertex = vertices[nextIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        distance = -Vector.dot(normal, vertexToBody);\n        if (distance < nearestDistance) {\n            vertexB = vertex;\n        }\n\n        return [vertexA, vertexB];\n    };\n\n})();\n\n},{\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],12:[function(_dereq_,module,exports){\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],13:[function(_dereq_,module,exports){\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Mouse = _dereq_('../core/Mouse');\nvar Events = _dereq_('../core/Events');\nvar Detector = _dereq_('../collision/Detector');\nvar Constraint = _dereq_('./Constraint');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Detector\":5,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../core/Sleeping\":22,\"../geometry/Bounds\":26,\"../geometry/Vertices\":29,\"./Constraint\":12}],14:[function(_dereq_,module,exports){\n(function (global){\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n\n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result will be high-resolution including decimal places if available.\n     * @method now\n     * @return {number} the current timestamp\n     */\n    Common.now = function() {\n        if (window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Used to require external libraries outside of the bundle.\n     * It first looks for the `globalName` on the environment's global namespace.\n     * If the global is not found, it will fall back to using the standard `require` using the `moduleName`.\n     * @private\n     * @method _requireGlobal\n     * @param {string} globalName The global module name\n     * @param {string} moduleName The fallback CommonJS module name\n     * @return {} The loaded module\n     */\n    Common._requireGlobal = function(globalName, moduleName) {\n        var obj = (typeof window !== 'undefined' ? window[globalName] : typeof global !== 'undefined' ? global[globalName] : null);\n        return obj || _dereq_(moduleName);\n    };\n})();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],15:[function(_dereq_,module,exports){\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar World = _dereq_('../body/World');\nvar Sleeping = _dereq_('./Sleeping');\nvar Resolver = _dereq_('../collision/Resolver');\nvar Render = _dereq_('../render/Render');\nvar Pairs = _dereq_('../collision/Pairs');\nvar Metrics = _dereq_('./Metrics');\nvar Grid = _dereq_('../collision/Grid');\nvar Events = _dereq_('./Events');\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('./Common');\nvar Body = _dereq_('../body/Body');\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(element, options) {\n        // options may be passed as the first (and only) argument\n        options = Common.isElement(element) ? options : element;\n        element = Common.isElement(element) ? element : null;\n        options = options || {};\n\n        if (element || options.render) {\n            Common.warn('Engine.create: engine.render is deprecated (see docs)');\n        }\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            timing: {\n                timestamp: 0,\n                timeScale: 1\n            },\n            broadphase: {\n                controller: Grid\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        // @deprecated\n        if (element || engine.render) {\n            var renderDefaults = {\n                element: element,\n                controller: Render\n            };\n            \n            engine.render = Common.extend(renderDefaults, engine.render);\n        }\n\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            engine.render = engine.render.controller.create(engine.render);\n        }\n\n        // @deprecated\n        if (engine.render) {\n            engine.render.engine = engine;\n        }\n\n        engine.world = options.world || World.create(engine.world);\n        engine.pairs = Pairs.create();\n        engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n        engine.metrics = engine.metrics || { extended: false };\n\n\n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            timing = engine.timing,\n            broadphase = engine.broadphase,\n            broadphasePairs = [],\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get lists of all bodies and constraints, no matter what composites they are in\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n\n        // if sleeping enabled, call the sleeping controller\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // applies gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, world.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // broadphase pass: find potential collision pairs\n        if (broadphase.controller) {\n            // if world is dirty, we must flush the whole grid\n            if (world.isModified)\n                broadphase.controller.clear(broadphase);\n\n            // update the grid buckets based on current bodies\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n            broadphasePairs = broadphase.pairsList;\n        } else {\n            // if no broadphase set, we just pass all bodies\n            broadphasePairs = allBodies;\n        }\n\n        // clear all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // narrowphase pass: find actual collisions, then create or update collision pairs\n        var collisions = broadphase.detector(broadphasePairs, engine);\n\n        // update collision pairs\n        var pairs = engine.pairs,\n            timestamp = timing.timestamp;\n        Pairs.update(pairs, collisions, timestamp);\n        Pairs.removeOld(pairs, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine including the world, pairs and broadphase.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        var world = engine.world;\n        \n        Pairs.clear(engine.pairs);\n\n        var broadphase = engine.broadphase;\n        if (broadphase.controller) {\n            var bodies = Composite.allBodies(world);\n            broadphase.controller.clear(broadphase);\n            broadphase.controller.update(broadphase, bodies, engine, true);\n        }\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * An alias for `Runner.run`, see `Matter.Runner` for more information.\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n     * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n     *\n     * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n     * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n     *\n     * @property render\n     * @type render\n     * @deprecated see Demo.js for an example of creating a renderer\n     * @default a Matter.Render instance\n     */\n\n    /**\n     * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n     *\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * A `World` composite object that will contain all simulated bodies and constraints.\n     *\n     * @property world\n     * @type world\n     * @default a Matter.World instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Grid\":6,\"../collision/Pairs\":8,\"../collision/Resolver\":10,\"../constraint/Constraint\":12,\"../render/Render\":31,\"./Common\":14,\"./Events\":16,\"./Metrics\":18,\"./Sleeping\":22}],16:[function(_dereq_,module,exports){\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        if (object.events) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = object.events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"./Common\":14}],17:[function(_dereq_,module,exports){\n/**\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\n*\n* @class Matter\n*/\n\nvar Matter = {};\n\nmodule.exports = Matter;\n\nvar Plugin = _dereq_('./Plugin');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * The library name.\n     * @property name\n     * @readOnly\n     * @type {String}\n     */\n    Matter.name = 'matter-js';\n\n    /**\n     * The library version.\n     * @property version\n     * @readOnly\n     * @type {String}\n     */\n    Matter.version = '0.14.2';\n\n    /**\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\n     * @property uses\n     * @type {Array}\n     */\n    Matter.uses = [];\n\n    /**\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\n     * @property used\n     * @readOnly\n     * @type {Array}\n     */\n    Matter.used = [];\n\n    /**\n     * Installs the given plugins on the `Matter` namespace.\n     * This is a short-hand for `Plugin.use`, see it for more information.\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\n     * @method use\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\n     */\n    Matter.use = function() {\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method before\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.before = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathBefore(Matter, path, func);\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method after\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.after = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathAfter(Matter, path, func);\n    };\n\n})();\n\n},{\"./Common\":14,\"./Plugin\":20}],18:[function(_dereq_,module,exports){\n\n},{\"../body/Composite\":2,\"./Common\":14}],19:[function(_dereq_,module,exports){\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = mouse.element.getAttribute('data-pixel-ratio') || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n},{\"../core/Common\":14}],20:[function(_dereq_,module,exports){\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var identifiers = range.split('-');\n        range = identifiers[0];\n\n        var isRange = isNaN(Number(range[0])),\n            version = isRange ? range.substr(1) : range,\n            parts = Common.map(version.split('.'), function(part) {\n                return Number(part);\n            });\n\n        return {\n            isRange: isRange,\n            version: version,\n            range: range,\n            operator: isRange ? range[0] : '',\n            parts: parts,\n            prerelease: identifiers[1],\n            number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var rangeParsed = Plugin.versionParse(range),\n            rangeParts = rangeParsed.parts,\n            versionParsed = Plugin.versionParse(version),\n            versionParts = versionParsed.parts;\n\n        if (rangeParsed.isRange) {\n            if (rangeParsed.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (rangeParsed.operator === '~') {\n                return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n            }\n\n            if (rangeParsed.operator === '^') {\n                if (rangeParts[0] > 0) {\n                    return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\n                }\n\n                if (rangeParts[1] > 0) {\n                    return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n                }\n\n                return versionParts[2] === rangeParts[2];\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n},{\"./Common\":14}],21:[function(_dereq_,module,exports){\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = _dereq_('./Events');\nvar Engine = _dereq_('./Engine');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n        Events.trigger(engine, 'beforeTick', event); // @deprecated\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n        Events.trigger(engine, 'tick', event); // @deprecated\n\n        // if world has been modified, clear the render scene graph\n        if (engine.world.isModified \n            && engine.render\n            && engine.render.controller\n            && engine.render.controller.clear) {\n            engine.render.controller.clear(engine.render); // @deprecated\n        }\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        // render\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            Events.trigger(runner, 'beforeRender', event);\n            Events.trigger(engine, 'beforeRender', event); // @deprecated\n\n            engine.render.controller.world(engine.render);\n\n            Events.trigger(runner, 'afterRender', event);\n            Events.trigger(engine, 'afterRender', event); // @deprecated\n        }\n\n        Events.trigger(runner, 'afterTick', event);\n        Events.trigger(engine, 'afterTick', event); // @deprecated\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n},{\"./Common\":14,\"./Engine\":15,\"./Events\":16}],22:[function(_dereq_,module,exports){\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = _dereq_('./Events');\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n},{\"./Events\":16}],23:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Vector = _dereq_('../geometry/Vector');\nvar decomp;\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n     * If the vertices are convex, they will pass through as supplied.\n     * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n     * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n     * By default the decomposition will discard collinear edges (to improve performance).\n     * It can also optionally discard any parts that have an area less than `minimumArea`.\n     * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n     * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param [[vector]] vertexSets\n     * @param {object} [options]\n     * @param {bool} [flagInternal=false]\n     * @param {number} [removeCollinear=0.01]\n     * @param {number} [minimumArea=10]\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\n        if (!decomp) {\n            decomp = Common._requireGlobal('decomp', 'poly-decomp');\n        }\n\n        var body,\n            parts,\n            isConvex,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n\n        if (!decomp) {\n            Common.warn('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.');\n        }\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n\n            if (isConvex || !decomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],24:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bodies = _dereq_('./Bodies');\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                            { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n    \n    /**\n     * Creates a composite with simple car setup of bodies and constraints.\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    /**\n     * Creates a simple soft body like object.\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Bodies\":23}],25:[function(_dereq_,module,exports){\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],26:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n},{}],27:[function(_dereq_,module,exports){\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n},{\"../core/Common\":14,\"../geometry/Bounds\":26}],28:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n},{}],29:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        var i;\n        if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x * scalar;\n                vertices[i].y += vector.y * scalar;\n            }\n        } else {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x;\n                vertices[i].y += vector.y;\n            }\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n                \n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],30:[function(_dereq_,module,exports){\nvar Matter = module.exports = _dereq_('../core/Matter');\n\nMatter.Body = _dereq_('../body/Body');\nMatter.Composite = _dereq_('../body/Composite');\nMatter.World = _dereq_('../body/World');\n\nMatter.Contact = _dereq_('../collision/Contact');\nMatter.Detector = _dereq_('../collision/Detector');\nMatter.Grid = _dereq_('../collision/Grid');\nMatter.Pairs = _dereq_('../collision/Pairs');\nMatter.Pair = _dereq_('../collision/Pair');\nMatter.Query = _dereq_('../collision/Query');\nMatter.Resolver = _dereq_('../collision/Resolver');\nMatter.SAT = _dereq_('../collision/SAT');\n\nMatter.Constraint = _dereq_('../constraint/Constraint');\nMatter.MouseConstraint = _dereq_('../constraint/MouseConstraint');\n\nMatter.Common = _dereq_('../core/Common');\nMatter.Engine = _dereq_('../core/Engine');\nMatter.Events = _dereq_('../core/Events');\nMatter.Mouse = _dereq_('../core/Mouse');\nMatter.Runner = _dereq_('../core/Runner');\nMatter.Sleeping = _dereq_('../core/Sleeping');\nMatter.Plugin = _dereq_('../core/Plugin');\n\n\nMatter.Bodies = _dereq_('../factory/Bodies');\nMatter.Composites = _dereq_('../factory/Composites');\n\nMatter.Axes = _dereq_('../geometry/Axes');\nMatter.Bounds = _dereq_('../geometry/Bounds');\nMatter.Svg = _dereq_('../geometry/Svg');\nMatter.Vector = _dereq_('../geometry/Vector');\nMatter.Vertices = _dereq_('../geometry/Vertices');\n\nMatter.Render = _dereq_('../render/Render');\nMatter.RenderPixi = _dereq_('../render/RenderPixi');\n\n// aliases\n\nMatter.World.add = Matter.Composite.add;\nMatter.World.remove = Matter.Composite.remove;\nMatter.World.addComposite = Matter.Composite.addComposite;\nMatter.World.addBody = Matter.Composite.addBody;\nMatter.World.addConstraint = Matter.Composite.addConstraint;\nMatter.World.clear = Matter.Composite.clear;\nMatter.Engine.run = Matter.Runner.run;\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Contact\":4,\"../collision/Detector\":5,\"../collision/Grid\":6,\"../collision/Pair\":7,\"../collision/Pairs\":8,\"../collision/Query\":9,\"../collision/Resolver\":10,\"../collision/SAT\":11,\"../constraint/Constraint\":12,\"../constraint/MouseConstraint\":13,\"../core/Common\":14,\"../core/Engine\":15,\"../core/Events\":16,\"../core/Matter\":17,\"../core/Metrics\":18,\"../core/Mouse\":19,\"../core/Plugin\":20,\"../core/Runner\":21,\"../core/Sleeping\":22,\"../factory/Bodies\":23,\"../factory/Composites\":24,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Svg\":27,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31,\"../render/RenderPixi\":32}],31:[function(_dereq_,module,exports){\n/**\n* The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = _dereq_('../core/Common');\nvar Composite = _dereq_('../body/Composite');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Events = _dereq_('../core/Events');\nvar Grid = _dereq_('../collision/Grid');\nvar Vector = _dereq_('../geometry/Vector');\nvar Mouse = _dereq_('../core/Mouse');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#18181d',\n                wireframeBackground: '#0f0f13',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            Render.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n        render.context.scale(pixelRatio, pixelRatio);\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.showBroadphase && engine.broadphase.controller === Grid)\n            Render.grid(render, engine.broadphase, context);\n\n        if (options.showDebug)\n            Render.debug(render, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method debug\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.debug = function(render, context) {\n        var c = context,\n            engine = render.engine,\n            world = engine.world,\n            metrics = engine.metrics,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            space = \"    \";\n\n        if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n            var text = \"\";\n\n            if (metrics.timing) {\n                text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n            }\n\n\n            render.debugString = text;\n            render.debugTimestamp = engine.timing.timestamp;\n        }\n\n        if (render.debugString) {\n            c.font = \"12px Arial\";\n\n            if (options.wireframes) {\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n            } else {\n                c.fillStyle = 'rgba(0,0,0,0.5)';\n            }\n\n            var split = render.debugString.split('\\n');\n\n            for (var i = 0; i < split.length; i++) {\n                c.fillText(split[i], 50, 50 + i * 18);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodyShadows\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyShadows = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            if (body.circleRadius) {\n                c.beginPath();\n                c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                c.beginPath();\n                c.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (var j = 1; j < body.vertices.length; j++) {\n                    c.lineTo(body.vertices[j].x, body.vertices[j].y);\n                }\n                c.closePath();\n            }\n\n            var distanceX = body.position.x - render.options.width * 0.5,\n                distanceY = body.position.y - render.options.height * 0.2,\n                distance = Math.abs(distanceX) + Math.abs(distanceY);\n\n            c.shadowColor = 'rgba(0,0,0,0.15)';\n            c.shadowOffsetX = 0.05 * distanceX;\n            c.shadowOffsetY = 0.05 * distanceY;\n            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n\n            c.fill();\n\n            c.shadowColor = null;\n            c.shadowOffsetX = null;\n            c.shadowOffsetY = null;\n            c.shadowBlur = null;\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                                 (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method grid\n     * @param {render} render\n     * @param {grid} grid\n     * @param {RenderingContext} context\n     */\n    Render.grid = function(render, grid, context) {\n        var c = context,\n            options = render.options;\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n        } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n        }\n\n        c.beginPath();\n\n        var bucketKeys = Common.keys(grid.buckets);\n\n        for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n\n            if (grid.buckets[bucketId].length < 2)\n                continue;\n\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth,\n                    0.5 + parseInt(region[2], 10) * grid.bucketHeight,\n                    grid.bucketWidth,\n                    grid.bucketHeight);\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                             Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                         Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Description\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Grid\":6,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}],32:[function(_dereq_,module,exports){\n/**\n* The `Matter.RenderPixi` module is an example renderer using pixi.js.\n* See also `Matter.Render` for a canvas based renderer.\n*\n* @class RenderPixi\n* @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n* It will likely be moved to its own repository (but maintenance will be limited).\n*/\n\nvar RenderPixi = {};\n\nmodule.exports = RenderPixi;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Events = _dereq_('../core/Events');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame \n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n    \n    /**\n     * Creates a new Pixi.js WebGL renderer\n     * @method create\n     * @param {object} options\n     * @return {RenderPixi} A new renderer\n     * @deprecated\n     */\n    RenderPixi.create = function(options) {\n        Common.warn('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)');\n\n        var defaults = {\n            controller: RenderPixi,\n            engine: null,\n            element: null,\n            frameRequestId: null,\n            canvas: null,\n            renderer: null,\n            container: null,\n            spriteContainer: null,\n            pixiOptions: null,\n            options: {\n                width: 800,\n                height: 600,\n                background: '#fafafa',\n                wireframeBackground: '#222',\n                hasBounds: false,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false\n            }\n        };\n\n        var render = Common.extend(defaults, options),\n            transparent = !render.options.wireframes && render.options.background === 'transparent';\n\n        // init pixi\n        render.pixiOptions = render.pixiOptions || {\n            view: render.canvas,\n            transparent: transparent,\n            antialias: true,\n            backgroundColor: options.background\n        };\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n        render.container = render.container || new PIXI.Container();\n        render.spriteContainer = render.spriteContainer || new PIXI.Container();\n        render.canvas = render.canvas || render.renderer.view;\n        render.bounds = render.bounds || { \n            min: {\n                x: 0,\n                y: 0\n            }, \n            max: { \n                x: render.options.width,\n                y: render.options.height\n            }\n        };\n\n        // event listeners\n        Events.on(render.engine, 'beforeUpdate', function() {\n            RenderPixi.clear(render);\n        });\n\n        // caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // use a sprite batch for performance\n        render.container.addChild(render.spriteContainer);\n\n        // insert canvas\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else {\n            Common.warn('No \"render.element\" passed, \"render.canvas\" was not inserted into document.');\n        }\n\n        // prevent menus on canvas\n        render.canvas.oncontextmenu = function() { return false; };\n        render.canvas.onselectstart = function() { return false; };\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            RenderPixi.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Clears the scene graph\n     * @method clear\n     * @param {RenderPixi} render\n     * @deprecated\n     */\n    RenderPixi.clear = function(render) {\n        var container = render.container,\n            spriteContainer = render.spriteContainer;\n\n        // clear stage container\n        while (container.children[0]) { \n            container.removeChild(container.children[0]); \n        }\n\n        // clear sprite batch\n        while (spriteContainer.children[0]) { \n            spriteContainer.removeChild(spriteContainer.children[0]); \n        }\n\n        var bgSprite = render.sprites['bg-0'];\n\n        // clear caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // set background sprite\n        render.sprites['bg-0'] = bgSprite;\n        if (bgSprite)\n            container.addChildAt(bgSprite, 0);\n\n        // add sprite batch back into container\n        render.container.addChild(render.spriteContainer);\n\n        // reset background state\n        render.currentBackground = null;\n\n        // reset bounds transforms\n        container.scale.set(1, 1);\n        container.position.set(0, 0);\n    };\n\n    /**\n     * Sets the background of the canvas \n     * @method setBackground\n     * @param {RenderPixi} render\n     * @param {string} background\n     * @deprecated\n     */\n    RenderPixi.setBackground = function(render, background) {\n        if (render.currentBackground !== background) {\n            var isColor = background.indexOf && background.indexOf('#') !== -1,\n                bgSprite = render.sprites['bg-0'];\n\n            if (isColor) {\n                // if solid background color\n                var color = Common.colorToNumber(background);\n                render.renderer.backgroundColor = color;\n\n                // remove background sprite if existing\n                if (bgSprite)\n                    render.container.removeChild(bgSprite); \n            } else {\n                // initialise background sprite if needed\n                if (!bgSprite) {\n                    var texture = _getTexture(render, background);\n\n                    bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n                    bgSprite.position.x = 0;\n                    bgSprite.position.y = 0;\n                    render.container.addChildAt(bgSprite, 0);\n                }\n            }\n\n            render.currentBackground = background;\n        }\n    };\n\n    /**\n     * Description\n     * @method world\n     * @param {engine} engine\n     * @deprecated\n     */\n    RenderPixi.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            renderer = render.renderer,\n            container = render.container,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            constraints = [],\n            i;\n\n        if (options.wireframes) {\n            RenderPixi.setBackground(render, options.wireframeBackground);\n        } else {\n            RenderPixi.setBackground(render, options.background);\n        }\n\n        // handle bounds\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        if (options.hasBounds) {\n            // Hide bodies that are not in view\n            for (i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n        } else {\n            constraints = allConstraints;\n        }\n\n        for (i = 0; i < bodies.length; i++)\n            RenderPixi.body(render, bodies[i]);\n\n        for (i = 0; i < constraints.length; i++)\n            RenderPixi.constraint(render, constraints[i]);\n\n        renderer.render(container);\n    };\n\n\n    /**\n     * Description\n     * @method constraint\n     * @param {engine} engine\n     * @param {constraint} constraint\n     * @deprecated\n     */\n    RenderPixi.constraint = function(render, constraint) {\n        var engine = render.engine,\n            bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB,\n            container = render.container,\n            constraintRender = constraint.render,\n            primitiveId = 'c-' + constraint.id,\n            primitive = render.primitives[primitiveId];\n\n        // initialise constraint primitive if not existing\n        if (!primitive)\n            primitive = render.primitives[primitiveId] = new PIXI.Graphics();\n\n        // don't render if constraint does not have two end points\n        if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n            primitive.clear();\n            return;\n        }\n\n        // add to scene graph if not already there\n        if (Common.indexOf(container.children, primitive) === -1)\n            container.addChild(primitive);\n\n        // render the constraint on every update, since they can change dynamically\n        primitive.clear();\n        primitive.beginFill(0, 0);\n        primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n        \n        if (bodyA) {\n            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n        } else {\n            primitive.moveTo(pointA.x, pointA.y);\n        }\n\n        if (bodyB) {\n            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n        } else {\n            primitive.lineTo(pointB.x, pointB.y);\n        }\n\n        primitive.endFill();\n    };\n    \n    /**\n     * Description\n     * @method body\n     * @param {engine} engine\n     * @param {body} body\n     * @deprecated\n     */\n    RenderPixi.body = function(render, body) {\n        var engine = render.engine,\n            bodyRender = body.render;\n\n        if (!bodyRender.visible)\n            return;\n\n        if (bodyRender.sprite && bodyRender.sprite.texture) {\n            var spriteId = 'b-' + body.id,\n                sprite = render.sprites[spriteId],\n                spriteContainer = render.spriteContainer;\n\n            // initialise body sprite if not existing\n            if (!sprite)\n                sprite = render.sprites[spriteId] = _createBodySprite(render, body);\n\n            // add to scene graph if not already there\n            if (Common.indexOf(spriteContainer.children, sprite) === -1)\n                spriteContainer.addChild(sprite);\n\n            // update body sprite\n            sprite.position.x = body.position.x;\n            sprite.position.y = body.position.y;\n            sprite.rotation = body.angle;\n            sprite.scale.x = bodyRender.sprite.xScale || 1;\n            sprite.scale.y = bodyRender.sprite.yScale || 1;\n        } else {\n            var primitiveId = 'b-' + body.id,\n                primitive = render.primitives[primitiveId],\n                container = render.container;\n\n            // initialise body primitive if not existing\n            if (!primitive) {\n                primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n                primitive.initialAngle = body.angle;\n            }\n\n            // add to scene graph if not already there\n            if (Common.indexOf(container.children, primitive) === -1)\n                container.addChild(primitive);\n\n            // update body primitive\n            primitive.position.x = body.position.x;\n            primitive.position.y = body.position.y;\n            primitive.rotation = body.angle - primitive.initialAngle;\n        }\n    };\n\n    /**\n     * Creates a body sprite\n     * @method _createBodySprite\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Sprite} sprite\n     * @deprecated\n     */\n    var _createBodySprite = function(render, body) {\n        var bodyRender = body.render,\n            texturePath = bodyRender.sprite.texture,\n            texture = _getTexture(render, texturePath),\n            sprite = new PIXI.Sprite(texture);\n\n        sprite.anchor.x = body.render.sprite.xOffset;\n        sprite.anchor.y = body.render.sprite.yOffset;\n\n        return sprite;\n    };\n\n    /**\n     * Creates a body primitive\n     * @method _createBodyPrimitive\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Graphics} graphics\n     * @deprecated\n     */\n    var _createBodyPrimitive = function(render, body) {\n        var bodyRender = body.render,\n            options = render.options,\n            primitive = new PIXI.Graphics(),\n            fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n            strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleWireframe = Common.colorToNumber('#bbb'),\n            strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n            part;\n\n        primitive.clear();\n\n        // handle compound parts\n        for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n                primitive.beginFill(fillStyle, 1);\n                primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n                primitive.beginFill(0, 0);\n                primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n                primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            primitive.endFill();\n\n            // angle indicator\n            if (options.showAngleIndicator || options.showAxes) {\n                primitive.beginFill(0, 0);\n\n                if (options.wireframes) {\n                    primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n                } else {\n                    primitive.lineStyle(1, strokeStyleIndicator);\n                }\n\n                primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n                primitive.lineTo(((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2 - body.position.x), \n                                 ((part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2 - body.position.y));\n\n                primitive.endFill();\n            }\n        }\n\n        return primitive;\n    };\n\n    /**\n     * Gets the requested texture (a PIXI.Texture) via its path\n     * @method _getTexture\n     * @private\n     * @param {RenderPixi} render\n     * @param {string} imagePath\n     * @return {PIXI.Texture} texture\n     * @deprecated\n     */\n    var _getTexture = function(render, imagePath) {\n        var texture = render.textures[imagePath];\n\n        if (!texture)\n            texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n\n        return texture;\n    };\n\n})();\n\n},{\"../body/Composite\":2,\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}]},{},[30])(30)\n});\n","'use strict';\n\nvar utils = require('./utils');\nvar normalizeHeaderName = require('./helpers/normalizeHeaderName');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('./adapters/xhr');\n  } else if (typeof process !== 'undefined') {\n    // For node use HTTP adapter\n    adapter = require('./adapters/http');\n  }\n  return adapter;\n}\n\nvar defaults = {\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Content-Type');\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\n\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n","'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar buildURL = require('./../helpers/buildURL');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\nvar btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || require('./../helpers/btoa');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n    var loadEvent = 'onreadystatechange';\n    var xDomain = false;\n\n    // For IE 8/9 CORS support\n    // Only supports POST and GET calls and doesn't returns the response headers.\n    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.\n    if (process.env.NODE_ENV !== 'test' &&\n        typeof window !== 'undefined' &&\n        window.XDomainRequest && !('withCredentials' in request) &&\n        !isURLSameOrigin(config.url)) {\n      request = new window.XDomainRequest();\n      loadEvent = 'onload';\n      xDomain = true;\n      request.onprogress = function handleProgress() {};\n      request.ontimeout = function handleTimeout() {};\n    }\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request[loadEvent] = function handleLoad() {\n      if (!request || (request.readyState !== 4 && !xDomain)) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)\n        status: request.status === 1223 ? 204 : request.status,\n        statusText: request.status === 1223 ? 'No Content' : request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      var cookies = require('./../helpers/cookies');\n\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?\n          cookies.read(config.xsrfCookieName) :\n          undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (config.withCredentials) {\n      request.withCredentials = true;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (requestData === undefined) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n","'use strict';\n\nvar enhanceError = require('./enhanceError');\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n","'use strict';\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n","'use strict';\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n","module.exports = {\n    decomp: polygonDecomp,\n    quickDecomp: polygonQuickDecomp,\n    isSimple: polygonIsSimple,\n    removeCollinearPoints: polygonRemoveCollinearPoints,\n    removeDuplicatePoints: polygonRemoveDuplicatePoints,\n    makeCCW: polygonMakeCCW\n};\n\n/**\n * Compute the intersection between two lines.\n * @static\n * @method lineInt\n * @param  {Array}  l1          Line vector 1\n * @param  {Array}  l2          Line vector 2\n * @param  {Number} precision   Precision to use when checking if the lines are parallel\n * @return {Array}              The intersection point.\n */\nfunction lineInt(l1,l2,precision){\n    precision = precision || 0;\n    var i = [0,0]; // point\n    var a1, b1, c1, a2, b2, c2, det; // scalars\n    a1 = l1[1][1] - l1[0][1];\n    b1 = l1[0][0] - l1[1][0];\n    c1 = a1 * l1[0][0] + b1 * l1[0][1];\n    a2 = l2[1][1] - l2[0][1];\n    b2 = l2[0][0] - l2[1][0];\n    c2 = a2 * l2[0][0] + b2 * l2[0][1];\n    det = a1 * b2 - a2*b1;\n    if (!scalar_eq(det, 0, precision)) { // lines are not parallel\n        i[0] = (b2 * c1 - b1 * c2) / det;\n        i[1] = (a1 * c2 - a2 * c1) / det;\n    }\n    return i;\n}\n\n/**\n * Checks if two line segments intersects.\n * @method segmentsIntersect\n * @param {Array} p1 The start vertex of the first line segment.\n * @param {Array} p2 The end vertex of the first line segment.\n * @param {Array} q1 The start vertex of the second line segment.\n * @param {Array} q2 The end vertex of the second line segment.\n * @return {Boolean} True if the two line segments intersect\n */\nfunction lineSegmentsIntersect(p1, p2, q1, q2){\n\tvar dx = p2[0] - p1[0];\n\tvar dy = p2[1] - p1[1];\n\tvar da = q2[0] - q1[0];\n\tvar db = q2[1] - q1[1];\n\n\t// segments are parallel\n\tif((da*dy - db*dx) === 0){\n\t\treturn false;\n\t}\n\n\tvar s = (dx * (q1[1] - p1[1]) + dy * (p1[0] - q1[0])) / (da * dy - db * dx);\n\tvar t = (da * (p1[1] - q1[1]) + db * (q1[0] - p1[0])) / (db * dx - da * dy);\n\n\treturn (s>=0 && s<=1 && t>=0 && t<=1);\n}\n\n/**\n * Get the area of a triangle spanned by the three given points. Note that the area will be negative if the points are not given in counter-clockwise order.\n * @static\n * @method area\n * @param  {Array} a\n * @param  {Array} b\n * @param  {Array} c\n * @return {Number}\n */\nfunction triangleArea(a,b,c){\n    return (((b[0] - a[0])*(c[1] - a[1]))-((c[0] - a[0])*(b[1] - a[1])));\n}\n\nfunction isLeft(a,b,c){\n    return triangleArea(a,b,c) > 0;\n}\n\nfunction isLeftOn(a,b,c) {\n    return triangleArea(a, b, c) >= 0;\n}\n\nfunction isRight(a,b,c) {\n    return triangleArea(a, b, c) < 0;\n}\n\nfunction isRightOn(a,b,c) {\n    return triangleArea(a, b, c) <= 0;\n}\n\nvar tmpPoint1 = [],\n    tmpPoint2 = [];\n\n/**\n * Check if three points are collinear\n * @method collinear\n * @param  {Array} a\n * @param  {Array} b\n * @param  {Array} c\n * @param  {Number} [thresholdAngle=0] Threshold angle to use when comparing the vectors. The function will return true if the angle between the resulting vectors is less than this value. Use zero for max precision.\n * @return {Boolean}\n */\nfunction collinear(a,b,c,thresholdAngle) {\n    if(!thresholdAngle){\n        return triangleArea(a, b, c) === 0;\n    } else {\n        var ab = tmpPoint1,\n            bc = tmpPoint2;\n\n        ab[0] = b[0]-a[0];\n        ab[1] = b[1]-a[1];\n        bc[0] = c[0]-b[0];\n        bc[1] = c[1]-b[1];\n\n        var dot = ab[0]*bc[0] + ab[1]*bc[1],\n            magA = Math.sqrt(ab[0]*ab[0] + ab[1]*ab[1]),\n            magB = Math.sqrt(bc[0]*bc[0] + bc[1]*bc[1]),\n            angle = Math.acos(dot/(magA*magB));\n        return angle < thresholdAngle;\n    }\n}\n\nfunction sqdist(a,b){\n    var dx = b[0] - a[0];\n    var dy = b[1] - a[1];\n    return dx * dx + dy * dy;\n}\n\n/**\n * Get a vertex at position i. It does not matter if i is out of bounds, this function will just cycle.\n * @method at\n * @param  {Number} i\n * @return {Array}\n */\nfunction polygonAt(polygon, i){\n    var s = polygon.length;\n    return polygon[i < 0 ? i % s + s : i % s];\n}\n\n/**\n * Clear the polygon data\n * @method clear\n * @return {Array}\n */\nfunction polygonClear(polygon){\n    polygon.length = 0;\n}\n\n/**\n * Append points \"from\" to \"to\"-1 from an other polygon \"poly\" onto this one.\n * @method append\n * @param {Polygon} poly The polygon to get points from.\n * @param {Number}  from The vertex index in \"poly\".\n * @param {Number}  to The end vertex index in \"poly\". Note that this vertex is NOT included when appending.\n * @return {Array}\n */\nfunction polygonAppend(polygon, poly, from, to){\n    for(var i=from; i<to; i++){\n        polygon.push(poly[i]);\n    }\n}\n\n/**\n * Make sure that the polygon vertices are ordered counter-clockwise.\n * @method makeCCW\n */\nfunction polygonMakeCCW(polygon){\n    var br = 0,\n        v = polygon;\n\n    // find bottom right point\n    for (var i = 1; i < polygon.length; ++i) {\n        if (v[i][1] < v[br][1] || (v[i][1] === v[br][1] && v[i][0] > v[br][0])) {\n            br = i;\n        }\n    }\n\n    // reverse poly if clockwise\n    if (!isLeft(polygonAt(polygon, br - 1), polygonAt(polygon, br), polygonAt(polygon, br + 1))) {\n        polygonReverse(polygon);\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * Reverse the vertices in the polygon\n * @method reverse\n */\nfunction polygonReverse(polygon){\n    var tmp = [];\n    var N = polygon.length;\n    for(var i=0; i!==N; i++){\n        tmp.push(polygon.pop());\n    }\n    for(var i=0; i!==N; i++){\n\t\tpolygon[i] = tmp[i];\n    }\n}\n\n/**\n * Check if a point in the polygon is a reflex point\n * @method isReflex\n * @param  {Number}  i\n * @return {Boolean}\n */\nfunction polygonIsReflex(polygon, i){\n    return isRight(polygonAt(polygon, i - 1), polygonAt(polygon, i), polygonAt(polygon, i + 1));\n}\n\nvar tmpLine1=[],\n    tmpLine2=[];\n\n/**\n * Check if two vertices in the polygon can see each other\n * @method canSee\n * @param  {Number} a Vertex index 1\n * @param  {Number} b Vertex index 2\n * @return {Boolean}\n */\nfunction polygonCanSee(polygon, a,b) {\n    var p, dist, l1=tmpLine1, l2=tmpLine2;\n\n    if (isLeftOn(polygonAt(polygon, a + 1), polygonAt(polygon, a), polygonAt(polygon, b)) && isRightOn(polygonAt(polygon, a - 1), polygonAt(polygon, a), polygonAt(polygon, b))) {\n        return false;\n    }\n    dist = sqdist(polygonAt(polygon, a), polygonAt(polygon, b));\n    for (var i = 0; i !== polygon.length; ++i) { // for each edge\n        if ((i + 1) % polygon.length === a || i === a){ // ignore incident edges\n            continue;\n        }\n        if (isLeftOn(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i + 1)) && isRightOn(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i))) { // if diag intersects an edge\n            l1[0] = polygonAt(polygon, a);\n            l1[1] = polygonAt(polygon, b);\n            l2[0] = polygonAt(polygon, i);\n            l2[1] = polygonAt(polygon, i + 1);\n            p = lineInt(l1,l2);\n            if (sqdist(polygonAt(polygon, a), p) < dist) { // if edge is blocking visibility to b\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\n/**\n * Check if two vertices in the polygon can see each other\n * @method canSee2\n * @param  {Number} a Vertex index 1\n * @param  {Number} b Vertex index 2\n * @return {Boolean}\n */\nfunction polygonCanSee2(polygon, a,b) {\n    // for each edge\n    for (var i = 0; i !== polygon.length; ++i) {\n        // ignore incident edges\n        if (i === a || i === b || (i + 1) % polygon.length === a || (i + 1) % polygon.length === b){\n            continue;\n        }\n        if( lineSegmentsIntersect(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i), polygonAt(polygon, i+1)) ){\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Copy the polygon from vertex i to vertex j.\n * @method copy\n * @param  {Number} i\n * @param  {Number} j\n * @param  {Polygon} [targetPoly]   Optional target polygon to save in.\n * @return {Polygon}                The resulting copy.\n */\nfunction polygonCopy(polygon, i,j,targetPoly){\n    var p = targetPoly || [];\n    polygonClear(p);\n    if (i < j) {\n        // Insert all vertices from i to j\n        for(var k=i; k<=j; k++){\n            p.push(polygon[k]);\n        }\n\n    } else {\n\n        // Insert vertices 0 to j\n        for(var k=0; k<=j; k++){\n            p.push(polygon[k]);\n        }\n\n        // Insert vertices i to end\n        for(var k=i; k<polygon.length; k++){\n            p.push(polygon[k]);\n        }\n    }\n\n    return p;\n}\n\n/**\n * Decomposes the polygon into convex pieces. Returns a list of edges [[p1,p2],[p2,p3],...] that cuts the polygon.\n * Note that this algorithm has complexity O(N^4) and will be very slow for polygons with many vertices.\n * @method getCutEdges\n * @return {Array}\n */\nfunction polygonGetCutEdges(polygon) {\n    var min=[], tmp1=[], tmp2=[], tmpPoly = [];\n    var nDiags = Number.MAX_VALUE;\n\n    for (var i = 0; i < polygon.length; ++i) {\n        if (polygonIsReflex(polygon, i)) {\n            for (var j = 0; j < polygon.length; ++j) {\n                if (polygonCanSee(polygon, i, j)) {\n                    tmp1 = polygonGetCutEdges(polygonCopy(polygon, i, j, tmpPoly));\n                    tmp2 = polygonGetCutEdges(polygonCopy(polygon, j, i, tmpPoly));\n\n                    for(var k=0; k<tmp2.length; k++){\n                        tmp1.push(tmp2[k]);\n                    }\n\n                    if (tmp1.length < nDiags) {\n                        min = tmp1;\n                        nDiags = tmp1.length;\n                        min.push([polygonAt(polygon, i), polygonAt(polygon, j)]);\n                    }\n                }\n            }\n        }\n    }\n\n    return min;\n}\n\n/**\n * Decomposes the polygon into one or more convex sub-Polygons.\n * @method decomp\n * @return {Array} An array or Polygon objects.\n */\nfunction polygonDecomp(polygon){\n    var edges = polygonGetCutEdges(polygon);\n    if(edges.length > 0){\n        return polygonSlice(polygon, edges);\n    } else {\n        return [polygon];\n    }\n}\n\n/**\n * Slices the polygon given one or more cut edges. If given one, this function will return two polygons (false on failure). If many, an array of polygons.\n * @method slice\n * @param {Array} cutEdges A list of edges, as returned by .getCutEdges()\n * @return {Array}\n */\nfunction polygonSlice(polygon, cutEdges){\n    if(cutEdges.length === 0){\n\t\treturn [polygon];\n    }\n    if(cutEdges instanceof Array && cutEdges.length && cutEdges[0] instanceof Array && cutEdges[0].length===2 && cutEdges[0][0] instanceof Array){\n\n        var polys = [polygon];\n\n        for(var i=0; i<cutEdges.length; i++){\n            var cutEdge = cutEdges[i];\n            // Cut all polys\n            for(var j=0; j<polys.length; j++){\n                var poly = polys[j];\n                var result = polygonSlice(poly, cutEdge);\n                if(result){\n                    // Found poly! Cut and quit\n                    polys.splice(j,1);\n                    polys.push(result[0],result[1]);\n                    break;\n                }\n            }\n        }\n\n        return polys;\n    } else {\n\n        // Was given one edge\n        var cutEdge = cutEdges;\n        var i = polygon.indexOf(cutEdge[0]);\n        var j = polygon.indexOf(cutEdge[1]);\n\n        if(i !== -1 && j !== -1){\n            return [polygonCopy(polygon, i,j),\n                    polygonCopy(polygon, j,i)];\n        } else {\n            return false;\n        }\n    }\n}\n\n/**\n * Checks that the line segments of this polygon do not intersect each other.\n * @method isSimple\n * @param  {Array} path An array of vertices e.g. [[0,0],[0,1],...]\n * @return {Boolean}\n * @todo Should it check all segments with all others?\n */\nfunction polygonIsSimple(polygon){\n    var path = polygon, i;\n    // Check\n    for(i=0; i<path.length-1; i++){\n        for(var j=0; j<i-1; j++){\n            if(lineSegmentsIntersect(path[i], path[i+1], path[j], path[j+1] )){\n                return false;\n            }\n        }\n    }\n\n    // Check the segment between the last and the first point to all others\n    for(i=1; i<path.length-2; i++){\n        if(lineSegmentsIntersect(path[0], path[path.length-1], path[i], path[i+1] )){\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction getIntersectionPoint(p1, p2, q1, q2, delta){\n\tdelta = delta || 0;\n\tvar a1 = p2[1] - p1[1];\n\tvar b1 = p1[0] - p2[0];\n\tvar c1 = (a1 * p1[0]) + (b1 * p1[1]);\n\tvar a2 = q2[1] - q1[1];\n\tvar b2 = q1[0] - q2[0];\n\tvar c2 = (a2 * q1[0]) + (b2 * q1[1]);\n\tvar det = (a1 * b2) - (a2 * b1);\n\n\tif(!scalar_eq(det,0,delta)){\n\t\treturn [((b2 * c1) - (b1 * c2)) / det, ((a1 * c2) - (a2 * c1)) / det];\n\t} else {\n\t\treturn [0,0];\n    }\n}\n\n/**\n * Quickly decompose the Polygon into convex sub-polygons.\n * @method quickDecomp\n * @param  {Array} result\n * @param  {Array} [reflexVertices]\n * @param  {Array} [steinerPoints]\n * @param  {Number} [delta]\n * @param  {Number} [maxlevel]\n * @param  {Number} [level]\n * @return {Array}\n */\nfunction polygonQuickDecomp(polygon, result,reflexVertices,steinerPoints,delta,maxlevel,level){\n    maxlevel = maxlevel || 100;\n    level = level || 0;\n    delta = delta || 25;\n    result = typeof(result)!==\"undefined\" ? result : [];\n    reflexVertices = reflexVertices || [];\n    steinerPoints = steinerPoints || [];\n\n    var upperInt=[0,0], lowerInt=[0,0], p=[0,0]; // Points\n    var upperDist=0, lowerDist=0, d=0, closestDist=0; // scalars\n    var upperIndex=0, lowerIndex=0, closestIndex=0; // Integers\n    var lowerPoly=[], upperPoly=[]; // polygons\n    var poly = polygon,\n        v = polygon;\n\n    if(v.length < 3){\n\t\treturn result;\n    }\n\n    level++;\n    if(level > maxlevel){\n        console.warn(\"quickDecomp: max level (\"+maxlevel+\") reached.\");\n        return result;\n    }\n\n    for (var i = 0; i < polygon.length; ++i) {\n        if (polygonIsReflex(poly, i)) {\n            reflexVertices.push(poly[i]);\n            upperDist = lowerDist = Number.MAX_VALUE;\n\n\n            for (var j = 0; j < polygon.length; ++j) {\n                if (isLeft(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j)) && isRightOn(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j - 1))) { // if line intersects with an edge\n                    p = getIntersectionPoint(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j), polygonAt(poly, j - 1)); // find the point of intersection\n                    if (isRight(polygonAt(poly, i + 1), polygonAt(poly, i), p)) { // make sure it's inside the poly\n                        d = sqdist(poly[i], p);\n                        if (d < lowerDist) { // keep only the closest intersection\n                            lowerDist = d;\n                            lowerInt = p;\n                            lowerIndex = j;\n                        }\n                    }\n                }\n                if (isLeft(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j + 1)) && isRightOn(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j))) {\n                    p = getIntersectionPoint(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j), polygonAt(poly, j + 1));\n                    if (isLeft(polygonAt(poly, i - 1), polygonAt(poly, i), p)) {\n                        d = sqdist(poly[i], p);\n                        if (d < upperDist) {\n                            upperDist = d;\n                            upperInt = p;\n                            upperIndex = j;\n                        }\n                    }\n                }\n            }\n\n            // if there are no vertices to connect to, choose a point in the middle\n            if (lowerIndex === (upperIndex + 1) % polygon.length) {\n                //console.log(\"Case 1: Vertex(\"+i+\"), lowerIndex(\"+lowerIndex+\"), upperIndex(\"+upperIndex+\"), poly.size(\"+polygon.length+\")\");\n                p[0] = (lowerInt[0] + upperInt[0]) / 2;\n                p[1] = (lowerInt[1] + upperInt[1]) / 2;\n                steinerPoints.push(p);\n\n                if (i < upperIndex) {\n                    //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.begin() + upperIndex + 1);\n                    polygonAppend(lowerPoly, poly, i, upperIndex+1);\n                    lowerPoly.push(p);\n                    upperPoly.push(p);\n                    if (lowerIndex !== 0){\n                        //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.end());\n                        polygonAppend(upperPoly, poly,lowerIndex,poly.length);\n                    }\n                    //upperPoly.insert(upperPoly.end(), poly.begin(), poly.begin() + i + 1);\n                    polygonAppend(upperPoly, poly,0,i+1);\n                } else {\n                    if (i !== 0){\n                        //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.end());\n                        polygonAppend(lowerPoly, poly,i,poly.length);\n                    }\n                    //lowerPoly.insert(lowerPoly.end(), poly.begin(), poly.begin() + upperIndex + 1);\n                    polygonAppend(lowerPoly, poly,0,upperIndex+1);\n                    lowerPoly.push(p);\n                    upperPoly.push(p);\n                    //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.begin() + i + 1);\n                    polygonAppend(upperPoly, poly,lowerIndex,i+1);\n                }\n            } else {\n                // connect to the closest point within the triangle\n                //console.log(\"Case 2: Vertex(\"+i+\"), closestIndex(\"+closestIndex+\"), poly.size(\"+polygon.length+\")\\n\");\n\n                if (lowerIndex > upperIndex) {\n                    upperIndex += polygon.length;\n                }\n                closestDist = Number.MAX_VALUE;\n\n                if(upperIndex < lowerIndex){\n                    return result;\n                }\n\n                for (var j = lowerIndex; j <= upperIndex; ++j) {\n                    if (\n                        isLeftOn(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j)) &&\n                        isRightOn(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j))\n                    ) {\n                        d = sqdist(polygonAt(poly, i), polygonAt(poly, j));\n                        if (d < closestDist && polygonCanSee2(poly, i, j)) {\n                            closestDist = d;\n                            closestIndex = j % polygon.length;\n                        }\n                    }\n                }\n\n                if (i < closestIndex) {\n                    polygonAppend(lowerPoly, poly,i,closestIndex+1);\n                    if (closestIndex !== 0){\n                        polygonAppend(upperPoly, poly,closestIndex,v.length);\n                    }\n                    polygonAppend(upperPoly, poly,0,i+1);\n                } else {\n                    if (i !== 0){\n                        polygonAppend(lowerPoly, poly,i,v.length);\n                    }\n                    polygonAppend(lowerPoly, poly,0,closestIndex+1);\n                    polygonAppend(upperPoly, poly,closestIndex,i+1);\n                }\n            }\n\n            // solve smallest poly first\n            if (lowerPoly.length < upperPoly.length) {\n                polygonQuickDecomp(lowerPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\n                polygonQuickDecomp(upperPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\n            } else {\n                polygonQuickDecomp(upperPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\n                polygonQuickDecomp(lowerPoly,result,reflexVertices,steinerPoints,delta,maxlevel,level);\n            }\n\n            return result;\n        }\n    }\n    result.push(polygon);\n\n    return result;\n}\n\n/**\n * Remove collinear points in the polygon.\n * @method removeCollinearPoints\n * @param  {Number} [precision] The threshold angle to use when determining whether two edges are collinear. Use zero for finest precision.\n * @return {Number}           The number of points removed\n */\nfunction polygonRemoveCollinearPoints(polygon, precision){\n    var num = 0;\n    for(var i=polygon.length-1; polygon.length>3 && i>=0; --i){\n        if(collinear(polygonAt(polygon, i-1),polygonAt(polygon, i),polygonAt(polygon, i+1),precision)){\n            // Remove the middle point\n            polygon.splice(i%polygon.length,1);\n            num++;\n        }\n    }\n    return num;\n}\n\n/**\n * Remove duplicate points in the polygon.\n * @method removeDuplicatePoints\n * @param  {Number} [precision] The threshold to use when determining whether two points are the same. Use zero for best precision.\n */\nfunction polygonRemoveDuplicatePoints(polygon, precision){\n    for(var i=polygon.length-1; i>=1; --i){\n        var pi = polygon[i];\n        for(var j=i-1; j>=0; --j){\n            if(points_eq(pi, polygon[j], precision)){\n                polygon.splice(i,1);\n                continue;\n            }\n        }\n    }\n}\n\n/**\n * Check if two scalars are equal\n * @static\n * @method eq\n * @param  {Number} a\n * @param  {Number} b\n * @param  {Number} [precision]\n * @return {Boolean}\n */\nfunction scalar_eq(a,b,precision){\n    precision = precision || 0;\n    return Math.abs(a-b) <= precision;\n}\n\n/**\n * Check if two points are equal\n * @static\n * @method points_eq\n * @param  {Array} a\n * @param  {Array} b\n * @param  {Number} [precision]\n * @return {Boolean}\n */\nfunction points_eq(a,b,precision){\n    return scalar_eq(a[0],b[0],precision) && scalar_eq(a[1],b[1],precision);\n}\n","module.exports = require('./lib/axios');","'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Factory for creating new instances\naxios.create = function create(instanceConfig) {\n  return createInstance(utils.merge(defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","'use strict';\n\nvar defaults = require('./../defaults');\nvar utils = require('./../utils');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = utils.merge({\n      url: arguments[0]\n    }, arguments[1]);\n  }\n\n  config = utils.merge(defaults, {method: 'get'}, this.defaults, config);\n  config.method = config.method.toLowerCase();\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n","'use strict';\n\nvar createError = require('./createError');\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  // Note: status is not exposed by XDomainRequest\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n","'use strict';\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n  error.request = request;\n  error.response = response;\n  return error;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%40/gi, '@').\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n  (function standardBrowserEnv() {\n    var msie = /(msie|trident)/i.test(navigator.userAgent);\n    var urlParsingNode = document.createElement('a');\n    var originURL;\n\n    /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n    function resolveURL(url) {\n      var href = url;\n\n      if (msie) {\n        // IE needs attribute set twice to normalize properties\n        urlParsingNode.setAttribute('href', href);\n        href = urlParsingNode.href;\n      }\n\n      urlParsingNode.setAttribute('href', href);\n\n      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n      return {\n        href: urlParsingNode.href,\n        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n        host: urlParsingNode.host,\n        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n        hostname: urlParsingNode.hostname,\n        port: urlParsingNode.port,\n        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n                  urlParsingNode.pathname :\n                  '/' + urlParsingNode.pathname\n      };\n    }\n\n    originURL = resolveURL(window.location.href);\n\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n    return function isURLSameOrigin(requestURL) {\n      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n      return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n    };\n  })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n      return true;\n    };\n  })()\n);\n","'use strict';\n\n// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js\n\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction E() {\n  this.message = 'String contains an invalid character';\n}\nE.prototype = new Error;\nE.prototype.code = 5;\nE.prototype.name = 'InvalidCharacterError';\n\nfunction btoa(input) {\n  var str = String(input);\n  var output = '';\n  for (\n    // initialize result and counter\n    var block, charCode, idx = 0, map = chars;\n    // if the next str index does not exist:\n    //   change the mapping table to \"=\"\n    //   check if d has no fractional digits\n    str.charAt(idx | 0) || (map = '=', idx % 1);\n    // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n    output += map.charAt(63 & block >> 8 - idx % 1 * 8)\n  ) {\n    charCode = str.charCodeAt(idx += 3 / 4);\n    if (charCode > 0xFF) {\n      throw new E();\n    }\n    block = block << 8 | charCode;\n  }\n  return output;\n}\n\nmodule.exports = btoa;\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n  (function standardBrowserEnv() {\n    return {\n      write: function write(name, value, expires, path, domain, secure) {\n        var cookie = [];\n        cookie.push(name + '=' + encodeURIComponent(value));\n\n        if (utils.isNumber(expires)) {\n          cookie.push('expires=' + new Date(expires).toGMTString());\n        }\n\n        if (utils.isString(path)) {\n          cookie.push('path=' + path);\n        }\n\n        if (utils.isString(domain)) {\n          cookie.push('domain=' + domain);\n        }\n\n        if (secure === true) {\n          cookie.push('secure');\n        }\n\n        document.cookie = cookie.join('; ');\n      },\n\n      read: function read(name) {\n        var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n        return (match ? decodeURIComponent(match[3]) : null);\n      },\n\n      remove: function remove(name) {\n        this.write(name, '', Date.now() - 86400000);\n      }\n    };\n  })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return {\n      write: function write() {},\n      read: function read() { return null; },\n      remove: function remove() {}\n    };\n  })()\n);\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n","'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\nvar isAbsoluteURL = require('./../helpers/isAbsoluteURL');\nvar combineURLs = require('./../helpers/combineURLs');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Support baseURL config\n  if (config.baseURL && !isAbsoluteURL(config.url)) {\n    config.url = combineURLs(config.baseURL, config.url);\n  }\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers || {}\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n};\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n","'use strict';\n\nvar Cancel = require('./Cancel');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","function resize(el) {\n  el.width = window.innerWidth;\n  el.height = window.innerHeight;\n}\n\nfunction getResizeEl(el){\n  window.addEventListener('resize', function(){\n    resize(el);\n  }, false);\n  resize(el);\n  return el;\n}\n\nfunction getResponseDist(val) {\n  return (val / 375) * window.innerWidth;\n}\n\nfunction px2coord(x, y, width, height) {\n  return {\n    u: x * 2 / width - 1,\n    v: 1 - 2 * y / height\n  }\n}\n\nexport {\n  getResizeEl,\n  getResponseDist,\n  px2coord\n};","const MAPSIZE = 1024;\n\nconst LEVELGROUP = {\n  LOW: 0,\n  MID: 1,\n  HIGH: 2\n};\n\nclass GLRenderer {\n  constructor(canvas, vshader, fshader, sceneVShader, sceneFShader) {\n    this.canvas = canvas;\n    this.gl = getWebGLContext(canvas, {\n      preserveDrawingBuffer: true\n    });\n    if (!this.gl) {\n      console.log(\"Failed to get the rendering context for WebGL\");\n      return;\n    }\n    // this.attributeLocation = {};\n    // this.uniformLocation = {};\n    this.pointProgram = createProgram(this.gl, vshader, fshader);\n    this.pointProgram.attributeLocation = {};\n    this.pointProgram.uniformLocation = {};\n\n    this.sceneProgram = createProgram(this.gl, sceneVShader, sceneFShader);\n    this.sceneProgram.attributeLocation = {};\n    this.sceneProgram.uniformLocation = {};\n\n    this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE);\n    this.gl.enable(this.gl.BLEND);\n    this.gl.clearColor(0, 0, 0, 0.0);\n\n    this.fbo = this.initFramebufferObject();\n    if (!this.fbo) {\n      console.log(\"Failed to intialize the framebuffer object (FBO)\");\n      return;\n    }\n    // this.gl.enable(this.gl.DEPTH_TEST);\n    this.gl.activeTexture(this.gl.TEXTURE0);\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this.fbo.texture);\n    this.setAttribute(\n      this.sceneProgram,\n      \"a_texcoord\",\n      new Float32Array([\n        0.0,\n        0.0,\n\n        1.0,\n        0.0,\n\n        0.0,\n        1.0,\n\n        0.0,\n        1.0,\n\n        1.0,\n        0.0,\n\n        1.0,\n        1.0\n      ]),\n      2,\n      \"FLOAT\"\n    );\n    this.setAttribute(\n      this.sceneProgram,\n      \"a_Position\",\n      new Float32Array([\n        -1.0,\n        -1.0,\n\n        1.0,\n        -1.0,\n\n        -1.0,\n        1.0,\n\n        -1.0,\n        1.0,\n\n        1.0,\n        -1.0,\n\n        1.0,\n        1.0\n      ]),\n      2,\n      \"FLOAT\"\n    );\n    this.setUniform2v(this.sceneProgram, \"u_resolution\", [\n      canvas.width,\n      canvas.height\n    ]);\n  }\n  setUniform2v(program, name, data) {\n    let location;\n    if (program.uniformLocation[name]) {\n      location = program.uniformLocation[name];\n    } else {\n      location = this.gl.getUniformLocation(program, name);\n      program[name] = location;\n    }\n    if (location < 0) {\n      console.log(`Failed to get the storage location of ${name}`);\n      return false;\n    }\n    let dataArray = new Float32Array(data);\n    this.gl.useProgram(program);\n    this.gl.uniform2fv.call(this.gl, location, dataArray);\n  }\n  setUniform1i(program, name, data){\n    let location;\n    if (program.uniformLocation[name]) {\n      location = program.uniformLocation[name];\n    } else {\n      location = this.gl.getUniformLocation(program, name);\n      program[name] = location;\n    }\n    if (location < 0) {\n      console.log(`Failed to get the storage location of ${name}`);\n      return false;\n    }\n    this.gl.useProgram(program);\n    this.gl.uniform1i.call(this.gl, location, data);\n  };\n  setAttribute(program, name, data, num, typeName) {\n    // console.log(name, data);\n    let location;\n    if (program.attributeLocation[name] && program.attributeLocation[name] >= 0) {\n      location = program.attributeLocation[name];\n    } else {\n      location = this.gl.getAttribLocation(program, name);\n      program.attributeLocation[name] = location;\n    }\n    if (location < 0) {\n      console.log(`Failed to get the storage location of ${name}`);\n      return false;\n    }\n    let buffer = this.gl.createBuffer();\n    if (!buffer) {\n      console.log(\"Failed to create the buffer object\");\n      return false;\n    }\n    this.gl.useProgram(program);\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, buffer);\n    this.gl.bufferData(this.gl.ARRAY_BUFFER, data, this.gl.STATIC_DRAW);\n    this.gl.vertexAttribPointer(location, num, this.gl[typeName], false, 0, 0);\n    this.gl.enableVertexAttribArray(location);\n\n    return true;\n  }\n  drawPoint(group, count) {\n    let _this = this;\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.fbo);\n    // this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\n    this.gl.viewport(0, 0, _this.canvas.width, _this.canvas.height);\n    // Set view port for FBO\n    this.gl.useProgram(this.pointProgram);\n    _this.setAttribute(_this.pointProgram, \"a_Position\", _this.pointData.positionData, 2, \"FLOAT\");\n    _this.setAttribute(_this.pointProgram, \"a_Level\", _this.pointData.levelData, 1, \"FLOAT\");\n    _this.setAttribute(_this.pointProgram, \"a_PointSize\", _this.pointData.sizeData, 1, \"FLOAT\");\n    this.setUniform1i(this.pointProgram, 'group', LEVELGROUP[group]);\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n    this.gl.drawArrays(this.gl.POINTS, 0, count);\n  }\n  drawScene() {\n    let _this = this;\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\n    this.gl.viewport(0, 0, _this.canvas.width, _this.canvas.height);\n    this.gl.useProgram(this.sceneProgram);\n    this.setAttribute(this.sceneProgram, \"a_texcoord\", new Float32Array([\n        0.0,\n        0.0,\n\n        _this.canvas.width / MAPSIZE,\n        0.0,\n\n        0.0,\n        _this.canvas.height / MAPSIZE,\n\n        0.0,\n        _this.canvas.height / MAPSIZE,\n\n        _this.canvas.width / MAPSIZE,\n        0.0,\n\n        _this.canvas.width / MAPSIZE,\n        _this.canvas.height / MAPSIZE\n      ]), 2, \"FLOAT\");\n    this.setAttribute(this.sceneProgram, \"a_Position\", new Float32Array([\n        -1.0,\n        -1.0,\n\n        1.0,\n        -1.0,\n\n        -1.0,\n        1.0,\n\n        -1.0,\n        1.0,\n\n        1.0,\n        -1.0,\n\n        1.0,\n        1.0\n      ]), 2, \"FLOAT\");\n    this.setUniform1i(this.sceneProgram, 'u_sceneMap', 0);\n    this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);\n  }\n  update(count) {\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n    for(let group in LEVELGROUP){\n      this.drawPoint(group, count);\n      this.drawScene();\n    }\n  }\n  initFramebufferObject() {\n    let _this = this;\n    let gl = _this.gl;\n    let framebuffer, texture, depthBuffer;\n    let OFFSCREEN_WIDTH = MAPSIZE,\n      OFFSCREEN_HEIGHT = MAPSIZE;\n    let error = function() {\n      if (framebuffer) gl.deleteFramebuffer(framebuffer);\n      if (texture) gl.deleteTexture(texture);\n      if (depthBuffer) gl.deleteRenderbuffer(depthBuffer);\n      return null;\n    };\n    framebuffer = gl.createFramebuffer();\n    if (!framebuffer) {\n      console.log(\"Failed to create frame buffer object\");\n      return error();\n    }\n    texture = gl.createTexture(); // Create a texture object\n    if (!texture) {\n      console.log(\"Failed to create texture object\");\n      return error();\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture); // Bind the object to target\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.RGBA,\n      OFFSCREEN_WIDTH,\n      OFFSCREEN_HEIGHT,\n      0,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      null\n    );\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    // Create a renderbuffer object and Set its size and parameters\n    depthBuffer = gl.createRenderbuffer(); // Create a renderbuffer object\n    if (!depthBuffer) {\n      console.log(\"Failed to create renderbuffer object\");\n      return error();\n    }\n    gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer); // Bind the object to target\n    gl.renderbufferStorage(\n      gl.RENDERBUFFER,\n      gl.DEPTH_COMPONENT16,\n      OFFSCREEN_WIDTH,\n      OFFSCREEN_HEIGHT\n    );\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);\n\n    framebuffer.texture = texture; // Store the texture object\n\n    // Check if FBO is configured correctly\n    var e = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (gl.FRAMEBUFFER_COMPLETE !== e) {\n      console.log(\"Frame buffer object is incomplete: \" + e.toString());\n      return error();\n    }\n\n    // Unbind the buffer object\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\n    return framebuffer;\n  }\n  setPointData(positionData, levelData, sizeData){\n    let _this = this;\n    _this.pointData = {\n      positionData,\n      levelData,\n      sizeData\n    };\n  }\n}\n\nexport {\n  GLRenderer as default\n};","import axios from \"axios\";\nimport GLRenderer from './gl_renderer';\n\nconst vShader = `\nuniform int group;\nattribute vec2 a_Position;\nattribute float a_Level;\nattribute float a_PointSize;\n// varying vec4 v_Inner;\nvarying vec4 v_Color;\n\nvoid main() {\n  gl_Position = vec4(a_Position, 0.0, 1.0);\n  gl_PointSize = a_PointSize;\n  if(group == 0){\n    if(a_Level == 1.0){\n      v_Color = vec4(1.0, 0.0, 0.0, 1.0);\n    }\n    if(a_Level == 2.0){\n      v_Color = vec4(0.0, 1.0, 0.0, 1.0);\n    }\n    if(a_Level == 3.0){\n      v_Color = vec4(0.0, 0.0, 1.0, 1.0);\n    }\n  }\n  if(group == 1){\n    if(a_Level == 4.0){\n      v_Color = vec4(1.0, 0.0, 0.0, 1.0);\n    }\n    if(a_Level == 5.0){\n      v_Color = vec4(0.0, 1.0, 0.0, 1.0);\n    }\n    if(a_Level == 6.0){\n      v_Color = vec4(0.0, 0.0, 1.0, 1.0);\n    }\n  }\n  if(group == 2){\n    if(a_Level == 7.0){\n      v_Color = vec4(1.0, 0.0, 0.0, 1.0);\n    }\n    if(a_Level == 8.0){\n      v_Color = vec4(0.0, 1.0, 0.0, 1.0);\n    }\n    if(a_Level == 9.0){\n      v_Color = vec4(0.0, 0.0, 1.0, 1.0);\n    }\n  }\n}\n`;\n\nconst fShader = `\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n// varying vec4 v_Inner;\nvarying vec4 v_Color;\n\nvoid main(){\n  float d = length(gl_PointCoord - vec2(0.5, 0.5));\n  float fill = smoothstep(0.40, 0.20, d);\n  // float l = smoothstep(v_Inner.x, v_Inner.y, d) - smoothstep(v_Inner.z, v_Inner.w, d);\n  gl_FragColor = v_Color * fill;\n  // gl_FragColor = vec4(0.863, 0.196, 0.184, 1.0) * l;\n  // gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n}\n`;\n\nconst sceneVShader = `\nattribute vec2 a_Position;\nattribute vec2 a_texcoord;\nvarying vec2 v_texcoord;\n\nvoid main() {\n  gl_Position = vec4(a_Position, 0.0, 1.0);\n  v_texcoord = a_texcoord;\n}\n`;\n\nconst sceneFShader = `\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvarying vec2 v_texcoord;\nuniform sampler2D u_sceneMap;\nuniform vec2 u_resolution;\n\nvoid main(){\n  vec4 mapColor = texture2D(u_sceneMap, v_texcoord);\n  float d = 0.0;\n  vec4 color = vec4(0.0);\n  if(mapColor.r > 0.0){\n    d = smoothstep(0.65, 0.7, mapColor.r);\n    color += vec4(1.0, 0.0, 0.0, 1.0) * d;\n  }\n  if(mapColor.g > 0.0){\n    d = smoothstep(0.65, 0.7, mapColor.g);\n    color += vec4(0.0, 1.0, 0.0, 1.0) * d;\n  }\n  if(mapColor.b > 0.0){\n    d = smoothstep(0.65, 0.7, mapColor.b);\n    color += vec4(0.0, 0.0, 1.0, 1.0) * d;\n  }\n  gl_FragColor = color;\n  // gl_FragColor = mapColor;\n}\n`;\n\nclass Renderer{\n  constructor(canvas){\n    let _this = this;\n    _this.dataArray = new Float32Array([]);\n    _this.isInit = false;\n    _this.initPromise = new Promise((resolve, reject) => {\n      // Promise.all([\n      //   axios.get(\"./plugin/v_shader.glsl\"),\n      //   axios.get(\"./plugin/f_shader.glsl\"),\n      //   axios.get(\"./plugin/scene_v_shader.glsl\"),\n      //   axios.get(\"./plugin/scene_f_shader.glsl\")\n      // ]).then(([resV, resF, resSV, resSF]) => {\n        // let vShader = resV.data;\n        // let fShader = resF.data;\n        // let sceneVShader = resSV.data;\n        // let sceneFShader = resSF.data;\n        _this.glRenderer = new GLRenderer(canvas, vShader, fShader, sceneVShader, sceneFShader);\n        _this.isInit = true;\n        resolve();\n      // });\n    });\n  }\n  updateData(posData, levelData, sizeData){\n    let _this = this;\n    _this.posDataArray = new Float32Array(posData);\n    _this.levelDataArray = new Float32Array(levelData);\n    _this.sizeDataArray = new Float32Array(sizeData);\n  }\n  draw(){\n    let _this = this;\n    if(_this.isInit){\n      _this.glRenderer.setPointData(_this.posDataArray, _this.levelDataArray, _this.sizeDataArray);\n      _this.glRenderer.update(_this.levelDataArray.length);\n    }\n  }\n}\n\nexport {\n  Renderer as default\n};","import { getResponseDist } from \"./helper\";\n\nconst BallRadiusMap = {\n  1: getResponseDist(20),\n  2: getResponseDist(30),\n  3: getResponseDist(40),\n  4: getResponseDist(50),\n  5: getResponseDist(60),\n  6: getResponseDist(70),\n  7: getResponseDist(80)\n};\n\nexport {\n  BallRadiusMap as default\n};","import decomp from \"poly-decomp\";\nwindow.decomp = decomp;\nimport Matter from \"matter-js\";\nimport BallRadiusMap from \"./game_param\";\n\nconst debug = false;\n\nconst MyBall = 'myBall';\n\nconst defaultCategory = 0x0001,\n  mergeCategory = 0x0002;\n\nconst Engine = Matter.Engine,\n  Render = Matter.Render,\n  Svg = Matter.Svg,\n  World = Matter.World,\n  Bodies = Matter.Bodies,\n  Body = Matter.Body,\n  Vector = Matter.Vector,\n  Vertices = Matter.Vertices,\n  Composite = Matter.Composite,\n  Events = Matter.Events;\n\nclass Physics{\n  constructor(target, sceneSize, wallWidth){\n    let _this = this;\n    this.target = target;\n    this.sceneSize = sceneSize;\n    this.wallWidth = wallWidth;\n\n    this.engine = Engine.create();\n    this.engine.world.gravity.y = -1;\n\n    if(debug){\n      this.render = Render.create({\n        element: target,\n        engine: this.engine,\n        options: {\n          width: sceneSize.width,\n          height: sceneSize.height,\n          background: 'transparent',\n          wireframeBackground: 'transparent'\n        }\n      });\n    }\n\n    // add proof\n    let path = document.getElementById('path');\n    let points = Svg.pathToVertices(path, 30);\n    let scale = sceneSize.width / 375;\n    Vertices.scale(points, scale, scale);\n    World.add(\n      this.engine.world,\n      Bodies.fromVertices(\n        sceneSize.width / 2 - wallWidth,\n        sceneSize.width / 4 - wallWidth * 5,\n        [points],\n        {\n          isStatic: true,\n          render: {\n            fillStyle: \"#fff\",\n            strokeStyle: \"#fff\",\n            lineWidth: 1\n          }\n        },\n        true\n      )\n    );\n\n    // add walls\n    World.add(this.engine.world, [\n      // left\n      Bodies.rectangle(\n        wallWidth / 2,\n        sceneSize.height / 2,\n        wallWidth,\n        sceneSize.height,\n        { isStatic: true }\n      ),\n      // right\n      Bodies.rectangle(\n        sceneSize.width - wallWidth / 2,\n        sceneSize.height / 2,\n        wallWidth,\n        sceneSize.height,\n        { isStatic: true }\n      ),\n      // bottom\n      Bodies.rectangle(\n        sceneSize.width / 2,\n        sceneSize.height - wallWidth / 2,\n        sceneSize.width,\n        wallWidth,\n        { isStatic: true }\n      )\n    ]);\n\n    Events.on(this.engine, 'beforeUpdate', event => {\n      if(!_this.collisionInfo){\n        _this.collisionInfo = _this.checkCollision();\n      }\n      if(_this.collisionInfo){\n        _this.mergeBall(_this.collisionInfo.srcBody, _this.collisionInfo.targetBody, () => {\n          _this.collisionInfo = null;\n        });\n      }\n    });\n\n    Engine.run(this.engine);\n    if(debug){\n      Render.run(this.render);\n    }\n  }\n  getDistSq(posA, posB){\n    return (posA.x - posB.x) * (posA.x - posB.x) + (posA.y - posB.y) * (posA.y - posB.y);\n  }\n  mergeBall(srcBody, targetBody, callback){\n    let _this = this;\n    let dist = Math.sqrt(_this.getDistSq(srcBody.position, targetBody.position));\n    if(dist < srcBody.circleRadius + targetBody.circleRadius + 5){\n      Body.setStatic(srcBody, true);\n      srcBody.collisionFilter.mask = mergeCategory;\n      if (dist < 5) {\n        let newLevel = Math.min(targetBody.level + 1, 7);\n        let scale = BallRadiusMap[newLevel] / BallRadiusMap[targetBody.level];\n        Body.scale(targetBody, scale, scale);\n        Body.set(targetBody, { level: newLevel });\n        World.remove(_this.engine.world, srcBody);\n        callback && callback();\n        return;\n      }\n      let velovity = {\n        x: targetBody.position.x - srcBody.position.x,\n        y: targetBody.position.y - srcBody.position.y\n      };\n      velovity.x /= dist / 8;\n      velovity.y /= dist / 8;\n      Body.translate(srcBody, Vector.create(velovity.x, velovity.y));\n    }\n  }\n  checkCollision(){\n    let _this = this;\n    let bodies = _this.getAllBall();\n    let isFoundCollision = false;\n    let targetBody,\n      srcBody;\n    for(let i = 0; i < bodies.length; i++){\n      let bodyA = bodies[i];\n      if(!bodyA.isStatic && !bodyA.isMerging){\n        for(let j = i + 1; j < bodies.length; j++){\n          let bodyB = bodies[j];\n          if (!bodyB.isStatic && !bodyB.isMerging && bodyA.level == bodyB.level && _this.getDistSq(bodyA.position, bodyB.position) <= 4 * bodyA.circleRadius * bodyA.circleRadius) {\n            if (bodyA.position.y < bodyB.position.y) {\n              targetBody = bodyA;\n              srcBody = bodyB;\n            } else {\n              targetBody = bodyB;\n              srcBody = bodyA;\n            }\n            isFoundCollision = true;\n            _this.isMerging = true;\n            break;\n          }\n        }\n      }\n      if(isFoundCollision){\n        break;\n      }\n    }\n    if(isFoundCollision){\n      return {\n        srcBody,\n        targetBody\n      };\n    }else{\n      return false;\n    }\n  }\n  createBall(x, y, radius, level, isStatic){\n    let ball = Bodies.circle(x, y, radius, {\n      collisionFilter: {\n        mask: defaultCategory\n      },\n      isStatic,\n      restitution: 0,\n      name: MyBall,\n      level\n    });\n    if(isStatic){\n      this.stillBall = ball;\n    }\n    World.add(this.engine.world, [ball]);\n  }\n  shoot(pos, startV){\n    if (this.stillBall) {\n      let v = Vector.create(pos.x - this.stillBall.position.x, pos.y - this.stillBall.position.y);\n      v = Vector.normalise(v);\n      v = Vector.mult(v, startV);\n      Body.setStatic(this.stillBall, false);\n      Body.setVelocity(this.stillBall, v);\n    }\n  }\n  getAllBall(){\n    let bodies = Composite.allBodies(this.engine.world);\n    let ballList = [];\n    bodies.forEach(body => {\n      if (body.name == MyBall){\n        ballList.push(body);\n      }\n    });\n    return ballList;\n  }\n}\n\nexport default Physics;","import { getResizeEl } from \"./helper\";\nimport Game from './game';\n\nvar stats;\n\nif (window.Stats) {\n  stats = new Stats();\n  stats.showPanel(0);\n  document.body.appendChild(stats.dom);\n}\nlet canvas = getResizeEl(document.getElementById(\"webgl\"));\nlet myGame = new Game(canvas);\nanimate();\n\nfunction animate(){\n  stats && stats.begin();\n  myGame.update();\n  requestAnimationFrame(animate);\n  stats && stats.end();\n}","import Renderer from \"./renderer\";\nimport Physics from \"./physics\";\nimport {\n  px2coord\n} from './helper';\n\nclass Engine {\n  constructor(canvas, wallWidth, updateRender) {\n    let _this = this;\n    _this.canvas = canvas;\n    _this.updateRender = updateRender;\n    _this.sceneSize = {\n      width: canvas.width,\n      height: canvas.height\n    };\n    _this.initPromise = new Promise((resolve, reject) => {\n      _this.renderer = new Renderer(canvas);\n      let debugWrapper = document.getElementById('debugWrapper');\n      _this.physics = new Physics(debugWrapper, _this.sceneSize, wallWidth);\n      _this.renderer.initPromise.then(() => {\n        resolve();\n      });\n    });\n  }\n  createBall(pos, radius, level){\n    let _this = this;\n    _this.physics.createBall(pos.x, pos.y, radius, level);\n    _this.updateRendererData();\n  }\n  addStillBall(pos, radius, level){\n    let _this = this;\n    _this.physics.createBall(pos.x, pos.y, radius, level, true);\n    _this.updateRendererData();\n  }\n  shoot(pos, startV){\n    let _this = this;\n    _this.physics.shoot(pos, startV);\n  }\n  updateRendererData(){\n    let _this = this;\n    let posList = [];\n    let levelList = [];\n    let sizeList = [];\n    _this.physics.getAllBall().forEach(ball => {\n      let coord = px2coord(ball.position.x, ball.position.y, _this.sceneSize.width, _this.sceneSize.height);\n      posList.push(coord.u);\n      posList.push(coord.v);\n      levelList.push(ball.level);\n      sizeList.push(ball.circleRadius * 4);\n    });\n    _this.renderer.updateData(posList, levelList, sizeList);\n  }\n  update() {\n    let _this = this;\n    _this.updateRendererData();\n    _this.renderer.draw();\n    if(_this.updateRender){\n      _this.updateRender();\n    }\n  }\n}\n\nexport {\n  Engine as default\n};","import Engine from './engine';\nimport {\n  getResponseDist\n} from './helper';\n\nimport BallRadiusMap from './game_param';\n\nfunction randomLevel(){\n  // return 1;\n  return Math.ceil(Math.random() * 3);\n}\n\nclass Game{\n  constructor(canvas){\n    let _this = this;\n    let sceneSize = {\n      width: canvas.width,\n      height: canvas.height\n    };\n    let wallWidth = getResponseDist(10);\n    _this.engine = new Engine(canvas, wallWidth);\n    // test\n    _this.startV = 14;\n    _this.birthPos = {\n      x: getResponseDist(375 / 2),\n      y: sceneSize.height * 0.8\n    };\n\n    _this.addStillBall(randomLevel());\n    // test end\n    document.addEventListener('touchend', function (e) {\n      let pos = {};\n      if (e.pageX) {\n        pos = {\n          x: e.pageX,\n          y: e.pageY\n        };\n      }\n      if (e.changedTouches.length) {\n        pos = {\n          x: e.changedTouches[0].pageX,\n          y: e.changedTouches[0].pageY\n        };\n      }\n      _this.shoot(pos, randomLevel());\n    }, false);\n  }\n  createBall(x, y, radius, level){\n    let _this = this;\n    _this.engine.createBall({\n      x,\n      y\n    }, radius, level);\n  }\n  addStillBall(level){\n    let _this = this;\n    let radius = BallRadiusMap[level];\n    _this.engine.addStillBall(_this.birthPos, radius, level);\n    console.log('still level:', level);\n  }\n  shoot(pos, newBallLevel){\n    let _this = this;\n    _this.engine.shoot(pos, _this.startV);\n    _this.addStillBall(newBallLevel);\n  }\n  update(){\n    let _this = this;\n    _this.engine.update();\n  }\n}\n\nexport {\n  Game as default\n};"],"sourceRoot":""}